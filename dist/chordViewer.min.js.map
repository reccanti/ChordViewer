{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///chordViewer.min.js","webpack:///webpack/bootstrap c0688cad550561256cb1","webpack:///./src/index.js","webpack:///./src/renderer.js","webpack:///./~/snapsvg/dist/snap.svg.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_renderer","window","render","Object","defineProperty","value","Snap","defaults","width","height","strings","strokeWidth","strokeStyle","fretEnumeration","fontFamily","fontSize","drawFretNum","elem","s","i","numStrings","fretNum","offset","fretHeight","spacing","fret","text","attr","font-family","font-size","drawNote","note","instrument","noteX","noteY","string","circ","circle","fill","drawChord","chord","notes","length","drawBoard","stringHeight","start","rect","_i","fretOffset","fretHeightStart","fretHeightEnd","initialize","initial","settings","furthestChord","numFrets","initialSettings","svg","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","a","b","events","n","firstDefined","ii","lastDefined","eve","name","scope","String","l","oldstop","args","Array","prototype","slice","arguments","listeners","z","indexed","queue","out","ce","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","on","exist","hasOwnProperty","event","attrs","nt","subname","RegExp","test","nts","off","unbind","key","splice","cur","funcs","once","f2","toString","undefined","mina","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","isArray","idgen","idprefix","Date","ID","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","update","pause","pdif","get","resume","res","end","easing","set","frame","len","A","anim","linear","status","time","getById","easeout","Math","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","$","el","createTextNode","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","Str","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","type","toLowerCase","isFinite","objectToString","clone","obj","constructor","repush","array","cacher","postprocessor","newf","arg","join","cache","count","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","replace","all","params","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","add","getSomeDefs","node","ownerSVGElement","parentNode","select","pdefs","defs","make","getSomeSVG","unit2px","getW","E","mgr","getBBox","getH","nam","class","appendChild","removeChild","add2group","list","forEach","children","childNodes","snap","hub","paper","tagName","nodeName","anims","_","transform","g","mask","pattern","symbol","method","Fragment","frag","parent","desc","proto","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","document","toFloat","parseFloat","toInt","parseInt","mmax","max","mmin","min","round","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","arr","paramCounts","u","data","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getOffset","box","getBoundingClientRect","docElem","clientTop","clientLeft","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getElementByPoint","target","canvas","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","matrix","fixids","urltest","it","uses","URL","linktest","els","ids","oldid","old","fs","from","to","chld","elproto","isWithoutTransform","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","map","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","d","matrixproto","norm","normalize","mag","me","fromCharCode","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","grad","gradient","setFontSize","textExtract","chi","getFontSize","reURLValue","clipIt","gradrg","tokens","stops","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","GgetBBox","seed","step","unshift","gradientLinear","gradientRadial","gradientUnits","addStop","fx","fy","clear","next","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","ax","ay","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align"],"mappings":"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","file":"chordViewer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ChordViewer\"] = factory();\n\telse\n\t\troot[\"ChordViewer\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ChordViewer\"] = factory();\n\telse\n\t\troot[\"ChordViewer\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _renderer = __webpack_require__(2);\n\t\n\twindow.render = _renderer.render; // const test = \"this is a test\";\n\t// console.log(test);\n\n\t// /**\n\t//  * This defines our instrument, a\n\t//  * ukulele. An instrument is defined\n\t//  * by its number of strings and its\n\t//  * notes.\n\t//  */\n\t// const ukulele = {\n\t//   strings: ['G', 'C', 'E', 'A'],\n\t//   notes: [{\n\t//     names: ['G'],\n\t//     string: 1,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['G#', 'Ab'],\n\t//     string: 1,\n\t//     fret: 1\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 1,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['A#', 'Bb'],\n\t//     string: 1,\n\t//     fret: 3\n\t//   }, {\n\t//     names: ['B'],\n\t//     string: 1,\n\t//     fret: 4\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 1,\n\t//     fret: 5\n\t//   }, {\n\t//     names: ['C#', 'Db'],\n\t//     string: 1,\n\t//     fret: 6\n\t//   }, {\n\t//     names: ['D'],\n\t//     string: 1,\n\t//     fret: 7\n\t//   }, {\n\t//     names: ['D#', 'Eb'],\n\t//     string: 1,\n\t//     fret: 8\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 1,\n\t//     fret: 9\n\t//   }, {\n\t//     names: ['F'],\n\t//     string: 1,\n\t//     fret: 10\n\t//   }, {\n\t//     names: ['F#', 'Gb'],\n\t//     string: 1,\n\t//     fret: 11\n\t//   }, {\n\t//     names: ['G'],\n\t//     string: 1,\n\t//     fret: 12\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 2,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['C#', 'Db'],\n\t//     string: 2,\n\t//     fret: 1\n\t//   }, {\n\t//     names: ['D'],\n\t//     string: 2,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['D#', 'Eb'],\n\t//     string: 2,\n\t//     fret: 3\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 2,\n\t//     fret: 4\n\t//   }, {\n\t//     names: ['F'],\n\t//     string: 2,\n\t//     fret: 5\n\t//   }, {\n\t//     names: ['F#', 'Gb'],\n\t//     string: 2,\n\t//     fret: 6\n\t//   }, {\n\t//     names: ['G'],\n\t//     string: 2,\n\t//     fret: 7\n\t//   }, {\n\t//     names: ['G#', 'Ab'],\n\t//     string: 2,\n\t//     fret: 8\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 2,\n\t//     fret: 9\n\t//   }, {\n\t//     names: ['A#', 'Bb'],\n\t//     string: 2,\n\t//     fret: 10\n\t//   }, {\n\t//     names: ['B'],\n\t//     string: 2,\n\t//     fret: 11\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 2,\n\t//     fret: 12\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 3,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['F'],\n\t//     string: 3,\n\t//     fret: 1\n\t//   }, {\n\t//     names: ['F#', 'Gb'],\n\t//     string: 3,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['G'],\n\t//     string: 3,\n\t//     fret: 3\n\t//   }, {\n\t//     names: ['G#', 'Ab'],\n\t//     string: 3,\n\t//     fret: 4\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 3,\n\t//     fret: 5\n\t//   }, {\n\t//     names: ['A#', 'Bb'],\n\t//     string: 3,\n\t//     fret: 6\n\t//   }, {\n\t//     names: ['B'],\n\t//     string: 3,\n\t//     fret: 7\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 3,\n\t//     fret: 8\n\t//   }, {\n\t//     names: ['C#', 'Db'],\n\t//     string: 3,\n\t//     fret: 9\n\t//   }, {\n\t//     names: ['D'],\n\t//     string: 3,\n\t//     fret: 10\n\t//   }, {\n\t//     names: ['D#', 'Eb'],\n\t//     string: 3,\n\t//     fret: 11\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 3,\n\t//     fret: 12\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 4,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['A#', 'Bb'],\n\t//     string: 4,\n\t//     fret: 1\n\t//   }, {\n\t//     names: ['B'],\n\t//     string: 4,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 4,\n\t//     fret: 3\n\t//   }, {\n\t//     names: ['C#', 'Db'],\n\t//     string: 4,\n\t//     fret: 4\n\t//   }, {\n\t//     names: ['D'],\n\t//     string: 4,\n\t//     fret: 5\n\t//   }, {\n\t//     names: ['D#', 'Eb'],\n\t//     string: 4,\n\t//     fret: 6\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 4,\n\t//     fret: 7\n\t//   }, {\n\t//     names: ['F'],\n\t//     string: 4,\n\t//     fret: 8\n\t//   }, {\n\t//     names: ['F#', 'Gb'],\n\t//     string: 4,\n\t//     fret: 9\n\t//   }, {\n\t//     names: ['G'],\n\t//     string: 4,\n\t//     fret: 10\n\t//   }, {\n\t//     names: ['G#', 'Ab'],\n\t//     string: 4,\n\t//     fret: 11\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 4,\n\t//     fret: 12\n\t//   }, ],\n\t// };\n\n\t// /**\n\t//  * This defines a C chord\n\t//  */\n\t// const CChord = {\n\t//   name: 'C',\n\t//   notes: [{\n\t//     names: ['C'],\n\t//     string: 4,\n\t//     fret: 3\n\t//   }, {\n\t//     names: ['G'],\n\t//     string: 1,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['C'],\n\t//     string: 2,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['E'],\n\t//     string: 3,\n\t//     fret: 0\n\t//   }]\n\t// };\n\n\t// /**\n\t//  * Defines a D Chord\n\t//  */\n\t// const DChord = {\n\t//   name: 'D',\n\t//   notes: [{\n\t//     names: ['A'],\n\t//     string: 4,\n\t//     fret: 0\n\t//   }, {\n\t//     names: ['A'],\n\t//     string: 1,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['D'],\n\t//     string: 2,\n\t//     fret: 2\n\t//   }, {\n\t//     names: ['F#', 'Eb'],\n\t//     string: 3,\n\t//     fret: 2\n\t//   }]\n\t// };\n\n\t// let r = new Renderer();\n\t// r.render('.uke-chord');\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\tvar Snap = __webpack_require__(3);\n\t\n\t/**\n\t * These refer to the default settings\n\t * of the viewer. The User can \n\t * overwrite them in the render \n\t * method\n\t */\n\tvar defaults = {\n\t    width: 500,\n\t    height: 500,\n\t    strings: ['G', 'C', 'E', 'A'],\n\t    strokeWidth: 5,\n\t    strokeStyle: '#000',\n\t    fretEnumeration: 4,\n\t    fontFamily: 'Gill Sans',\n\t    fontSize: '36px'\n\t};\n\t\n\t/**\n\t * This function draws the fret number(s) on the board\n\t */\n\tvar drawFretNum = function drawFretNum(elem, s) {\n\t    for (var i = 0; i < s.numStrings + 1; i++) {\n\t        var fretNum = i + s.offset;\n\t        if (fretNum % s.fretEnumeration === 0) {\n\t            var fretHeight = s.spacing * s.numStrings;\n\t            var fret = elem.text(s.spacing * i + s.spacing / 2, fretHeight + s.spacing / 1.25, fretNum);\n\t            fret.attr({\n\t                'font-family': 'Gill Sans',\n\t                'font-size': '36px'\n\t            });\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * This function draws a note on the given instrument\n\t */\n\tvar drawNote = function drawNote(elem, note, instrument, s) {\n\t    var noteX = (note.fret - s.offset) * s.spacing + s.spacing / 2 + s.strokeWidth / 2;\n\t    var noteY = note.string * s.spacing;\n\t    var circ = elem.circle(noteX, noteY, s.spacing / 4);\n\t    if (note.fret === 0) {\n\t        circ.attr({\n\t            fill: 'none'\n\t        });\n\t    } else {\n\t        circ.attr({\n\t            fill: s.strokeStyle\n\t        });\n\t    }\n\t};\n\t\n\t/**\n\t * This function draws a chord on the given instrument\n\t */\n\tvar drawChord = function drawChord(elem, chord, instrument, s) {\n\t    for (var i = 0; i < chord.notes.length; i++) {\n\t        drawNote(elem, chord.notes[i], instrument, s);\n\t    }\n\t};\n\t\n\t/**\n\t * This function draws the board according to \n\t * the provided settings\n\t */\n\tvar drawBoard = function drawBoard(elem, instrument, s) {\n\t    // draw the strings\n\t    for (var i = 0; i < s.numStrings; i++) {\n\t        var stringHeight = s.start + i * s.spacing;\n\t        var note = elem.text(s.spacing / 2, stringHeight + 12, instrument.strings[i]);\n\t        note.attr({\n\t            'font-family': 'Gill Sans',\n\t            'font-size': '36px'\n\t        });\n\t        var string = elem.rect(s.spacing, stringHeight, s.width, s.strokeWidth);\n\t        string.attr({\n\t            fill: s.strokeStyle\n\t        });\n\t    }\n\t    // draw the frets\n\t    for (var _i = 0; _i < s.numStrings + 2; _i++) {\n\t        var fretOffset = s.spacing + _i * s.spacing;\n\t        var fretHeightStart = s.spacing * 1;\n\t        var fretHeightEnd = s.spacing * (s.numStrings - 1);\n\t        var fret = elem.rect(fretOffset, fretHeightStart, s.strokeWidth, fretHeightEnd);\n\t        fret.attr({\n\t            fill: s.strokeStyle\n\t        });\n\t    }\n\t    drawFretNum(elem, s);\n\t};\n\t\n\t/**\n\t * Use the instrument, chord, and other settings to\n\t * create the settings for the object\n\t */\n\tvar initialize = function initialize(instrument, chord, s) {\n\t    var initial = {};\n\t    var settings = s || {};\n\t\n\t    initial.fretEnumeration = settings.fretEnumeration ? settings.fretEnumeration : defaults.fretEnumeration;\n\t    initial.numStrings = instrument.strings.length || defaults.numStrings;\n\t    initial.height = settings.height ? settings.height - settings.height / 6 : defaults.height - defaults.height / 6;\n\t    initial.width = settings.width ? settings.width - settings.width / 6 : defaults.width - defaults.width / 6;\n\t    initial.strokeWidth = settings.strokeWidth ? settings.strokeWidth : defaults.strokeWidth;\n\t    initial.strokeStyle = settings.strokeStyle ? settings.strokeStyle : defaults.strokeStyle;\n\t    initial.spacing = (initial.height - initial.strokeWidth) / (initial.numStrings + 1);\n\t    initial.start = initial.spacing;\n\t\n\t    var furthestChord = 0;\n\t    for (var i = 0; i < chord.notes.length; i++) {\n\t        if (chord.notes[i].fret > furthestChord) {\n\t            furthestChord = chord.notes[i].fret;\n\t        }\n\t    }\n\t    var numFrets = initial.numStrings + 1;\n\t    initial.offset = furthestChord - numFrets;\n\t    if (initial.offset < 0) {\n\t        initial.offset = 0;\n\t    }\n\t\n\t    return initial;\n\t};\n\t\n\t/**\n\t * Given an SVG element, an instrument, and a chord,\n\t * this function renders a chord on it. The user can also\n\t * optionally define some settings that alter the appearance\n\t */\n\tvar render = function render(elem, instrument, chord, settings) {\n\t    var initialSettings = initialize(instrument, chord, settings);\n\t    var svg = Snap(elem);\n\t    drawBoard(svg, instrument, initialSettings);\n\t    drawChord(svg, chord, instrument, initialSettings);\n\t};\n\t\n\texports.render = render;\n\t\n\t// /**\n\t//  * This is our Renderer. The Renderer\n\t//  * takes in a\n\t//  */\n\t// const Renderer = function() {\n\n\t//   /**\n\t//    * Given a DOM element, render the\n\t//    * chord into that element\n\t//    */\n\t//   const render = function() {\n\t//     let $elem = $(this);\n\t//     let $svg = $('<svg width=\"500\" height=\"500\"></svg>');\n\t//     const svg = Snap($svg.get(0));\n\t//     $elem.append($svg);\n\t//     const chord = $elem.data('chord');\n\n\t//     const settings = initialize(ukulele, DChord, {\n\t//       fretEnumeration: 2\n\t//     });\n\n\t//     drawBoard(svg, ukulele, settings)\n\t//     // drawNote(svg, 'C', ukulele, settings);\n\t//     drawChord(svg, DChord, ukulele, settings);\n\t//   }\n\n\t//   return {\n\t//     render: render\n\t//   };\n\t// };\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\tvar fix = module.exports=0;\n\t\n\t// Snap.svg 0.4.0\n\t// \n\t// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// \n\t// build: 2015-04-07\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.4.2\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t\n\t     * Fires event with given `name`, given scope and other parameters.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            name = String(name);\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    \n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        name = String(name);\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = name.split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = name.split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n\t        }\n\t        return current_event;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = name.split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = name.split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.unbind(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))) : (glob.eve = eve));\n\t})(this);\n\t\n\t(function (glob, factory) {\n\t    // AMD support\n\t    if (true) {\n\t        // Define as an anonymous module\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n\t            return factory(glob, eve);\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports != 'undefined') {\n\t        // Next for Node.js or CommonJS\n\t        var eve = require('eve');\n\t        module.exports = factory(glob, eve);\n\t    } else {\n\t        // Browser globals (glob is window)\n\t        // Snap adds itself to window\n\t        factory(glob, glob.eve);\n\t    }\n\t}(window || this, function (window, eve) {\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tvar mina = (function (eve) {\n\t    var animations = {},\n\t    requestAnimFrame = window.requestAnimationFrame       ||\n\t                       window.webkitRequestAnimationFrame ||\n\t                       window.mozRequestAnimationFrame    ||\n\t                       window.oRequestAnimationFrame      ||\n\t                       window.msRequestAnimationFrame     ||\n\t                       function (callback) {\n\t                           setTimeout(callback, 16);\n\t                       },\n\t    isArray = Array.isArray || function (a) {\n\t        return a instanceof Array ||\n\t            Object.prototype.toString.call(a) == \"[object Array]\";\n\t    },\n\t    idgen = 0,\n\t    idprefix = \"M\" + (+new Date).toString(36),\n\t    ID = function () {\n\t        return idprefix + (idgen++).toString(36);\n\t    },\n\t    diff = function (a, b, A, B) {\n\t        if (isArray(a)) {\n\t            res = [];\n\t            for (var i = 0, ii = a.length; i < ii; i++) {\n\t                res[i] = diff(a[i], b, A[i], B);\n\t            }\n\t            return res;\n\t        }\n\t        var dif = (A - a) / (B - b);\n\t        return function (bb) {\n\t            return a + dif * (bb - b);\n\t        };\n\t    },\n\t    timer = Date.now || function () {\n\t        return +new Date;\n\t    },\n\t    sta = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.s;\n\t        }\n\t        var ds = a.s - val;\n\t        a.b += a.dur * ds;\n\t        a.B += a.dur * ds;\n\t        a.s = val;\n\t    },\n\t    speed = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.spd;\n\t        }\n\t        a.spd = val;\n\t    },\n\t    duration = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.dur;\n\t        }\n\t        a.s = a.s * val / a.dur;\n\t        a.dur = val;\n\t    },\n\t    stopit = function () {\n\t        var a = this;\n\t        delete animations[a.id];\n\t        a.update();\n\t        eve(\"mina.stop.\" + a.id, a);\n\t    },\n\t    pause = function () {\n\t        var a = this;\n\t        if (a.pdif) {\n\t            return;\n\t        }\n\t        delete animations[a.id];\n\t        a.update();\n\t        a.pdif = a.get() - a.b;\n\t    },\n\t    resume = function () {\n\t        var a = this;\n\t        if (!a.pdif) {\n\t            return;\n\t        }\n\t        a.b = a.get() - a.pdif;\n\t        delete a.pdif;\n\t        animations[a.id] = a;\n\t    },\n\t    update = function () {\n\t        var a = this,\n\t            res;\n\t        if (isArray(a.start)) {\n\t            res = [];\n\t            for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                res[j] = +a.start[j] +\n\t                    (a.end[j] - a.start[j]) * a.easing(a.s);\n\t            }\n\t        } else {\n\t            res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t        }\n\t        a.set(res);\n\t    },\n\t    frame = function () {\n\t        var len = 0;\n\t        for (var i in animations) if (animations.hasOwnProperty(i)) {\n\t            var a = animations[i],\n\t                b = a.get(),\n\t                res;\n\t            len++;\n\t            a.s = (b - a.b) / (a.dur / a.spd);\n\t            if (a.s >= 1) {\n\t                delete animations[i];\n\t                a.s = 1;\n\t                len--;\n\t                (function (a) {\n\t                    setTimeout(function () {\n\t                        eve(\"mina.finish.\" + a.id, a);\n\t                    });\n\t                }(a));\n\t            }\n\t            a.update();\n\t        }\n\t        len && requestAnimFrame(frame);\n\t    },\n\t    /*\\\n\t     * mina\n\t     [ method ]\n\t     **\n\t     * Generic animation of numbers\n\t     **\n\t     - a (number) start _slave_ number\n\t     - A (number) end _slave_ number\n\t     - b (number) start _master_ number (start time in general case)\n\t     - B (number) end _master_ number (end time in gereal case)\n\t     - get (function) getter of _master_ number (see @mina.time)\n\t     - set (function) setter of _slave_ number\n\t     - easing (function) #optional easing function, default is @mina.linear\n\t     = (object) animation descriptor\n\t     o {\n\t     o         id (string) animation id,\n\t     o         start (number) start _slave_ number,\n\t     o         end (number) end _slave_ number,\n\t     o         b (number) start _master_ number,\n\t     o         s (number) animation status (0..1),\n\t     o         dur (number) animation duration,\n\t     o         spd (number) animation speed,\n\t     o         get (function) getter of _master_ number (see @mina.time),\n\t     o         set (function) setter of _slave_ number,\n\t     o         easing (function) easing function, default is @mina.linear,\n\t     o         status (function) status getter/setter,\n\t     o         speed (function) speed getter/setter,\n\t     o         duration (function) duration getter/setter,\n\t     o         stop (function) animation stopper\n\t     o         pause (function) pauses the animation\n\t     o         resume (function) resumes the animation\n\t     o         update (function) calles setter with the right value of the animation\n\t     o }\n\t    \\*/\n\t    mina = function (a, A, b, B, get, set, easing) {\n\t        var anim = {\n\t            id: ID(),\n\t            start: a,\n\t            end: A,\n\t            b: b,\n\t            s: 0,\n\t            dur: B - b,\n\t            spd: 1,\n\t            get: get,\n\t            set: set,\n\t            easing: easing || mina.linear,\n\t            status: sta,\n\t            speed: speed,\n\t            duration: duration,\n\t            stop: stopit,\n\t            pause: pause,\n\t            resume: resume,\n\t            update: update\n\t        };\n\t        animations[anim.id] = anim;\n\t        var len = 0, i;\n\t        for (i in animations) if (animations.hasOwnProperty(i)) {\n\t            len++;\n\t            if (len == 2) {\n\t                break;\n\t            }\n\t        }\n\t        len == 1 && requestAnimFrame(frame);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * mina.time\n\t     [ method ]\n\t     **\n\t     * Returns the current time. Equivalent to:\n\t     | function () {\n\t     |     return (new Date).getTime();\n\t     | }\n\t    \\*/\n\t    mina.time = timer;\n\t    /*\\\n\t     * mina.getById\n\t     [ method ]\n\t     **\n\t     * Returns an animation by its id\n\t     - id (string) animation's id\n\t     = (object) See @mina\n\t    \\*/\n\t    mina.getById = function (id) {\n\t        return animations[id] || null;\n\t    };\n\t\n\t    /*\\\n\t     * mina.linear\n\t     [ method ]\n\t     **\n\t     * Default linear easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.linear = function (n) {\n\t        return n;\n\t    };\n\t    /*\\\n\t     * mina.easeout\n\t     [ method ]\n\t     **\n\t     * Easeout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeout = function (n) {\n\t        return Math.pow(n, 1.7);\n\t    };\n\t    /*\\\n\t     * mina.easein\n\t     [ method ]\n\t     **\n\t     * Easein easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easein = function (n) {\n\t        return Math.pow(n, .48);\n\t    };\n\t    /*\\\n\t     * mina.easeinout\n\t     [ method ]\n\t     **\n\t     * Easeinout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeinout = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        var q = .48 - n / 1.04,\n\t            Q = Math.sqrt(.1734 + q * q),\n\t            x = Q - q,\n\t            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t            y = -Q - q,\n\t            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t            t = X + Y + .5;\n\t        return (1 - t) * 3 * t * t + t * t * t;\n\t    };\n\t    /*\\\n\t     * mina.backin\n\t     [ method ]\n\t     **\n\t     * Backin easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backin = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n - s);\n\t    };\n\t    /*\\\n\t     * mina.backout\n\t     [ method ]\n\t     **\n\t     * Backout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backout = function (n) {\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        n = n - 1;\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n + s) + 1;\n\t    };\n\t    /*\\\n\t     * mina.elastic\n\t     [ method ]\n\t     **\n\t     * Elastic easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.elastic = function (n) {\n\t        if (n == !!n) {\n\t            return n;\n\t        }\n\t        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n\t            (2 * Math.PI) / .3) + 1;\n\t    };\n\t    /*\\\n\t     * mina.bounce\n\t     [ method ]\n\t     **\n\t     * Bounce easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.bounce = function (n) {\n\t        var s = 7.5625,\n\t            p = 2.75,\n\t            l;\n\t        if (n < (1 / p)) {\n\t            l = s * n * n;\n\t        } else {\n\t            if (n < (2 / p)) {\n\t                n -= (1.5 / p);\n\t                l = s * n * n + .75;\n\t            } else {\n\t                if (n < (2.5 / p)) {\n\t                    n -= (2.25 / p);\n\t                    l = s * n * n + .9375;\n\t                } else {\n\t                    n -= (2.625 / p);\n\t                    l = s * n * n + .984375;\n\t                }\n\t            }\n\t        }\n\t        return l;\n\t    };\n\t    window.mina = mina;\n\t    return mina;\n\t})(typeof eve == \"undefined\" ? function () {} : eve);\n\t// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\tvar Snap = (function(root) {\n\tSnap.version = \"0.4.0\";\n\t/*\\\n\t * Snap\n\t [ method ]\n\t **\n\t * Creates a drawing surface or wraps existing SVG element.\n\t **\n\t - width (number|string) width of surface\n\t - height (number|string) height of surface\n\t * or\n\t - DOM (SVGElement) element to be wrapped into Snap structure\n\t * or\n\t - array (array) array of elements (will return set of elements)\n\t * or\n\t - query (string) CSS query selector\n\t = (object) @Element\n\t\\*/\n\tfunction Snap(w, h) {\n\t    if (w) {\n\t        if (w.nodeType) {\n\t            return wrap(w);\n\t        }\n\t        if (is(w, \"array\") && Snap.set) {\n\t            return Snap.set.apply(Snap, w);\n\t        }\n\t        if (w instanceof Element) {\n\t            return w;\n\t        }\n\t        if (h == null) {\n\t            w = glob.doc.querySelector(String(w));\n\t            return wrap(w);\n\t        }\n\t    }\n\t    w = w == null ? \"100%\" : w;\n\t    h = h == null ? \"100%\" : h;\n\t    return new Paper(w, h);\n\t}\n\tSnap.toString = function () {\n\t    return \"Snap v\" + this.version;\n\t};\n\tSnap._ = {};\n\tvar glob = {\n\t    win: root.window,\n\t    doc: root.window.document\n\t};\n\tSnap._.glob = glob;\n\tvar has = \"hasOwnProperty\",\n\t    Str = String,\n\t    toFloat = parseFloat,\n\t    toInt = parseInt,\n\t    math = Math,\n\t    mmax = math.max,\n\t    mmin = math.min,\n\t    abs = math.abs,\n\t    pow = math.pow,\n\t    PI = math.PI,\n\t    round = math.round,\n\t    E = \"\",\n\t    S = \" \",\n\t    objectToString = Object.prototype.toString,\n\t    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t    reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t    separator = Snap._.separator = /[,\\s]+/,\n\t    whitespace = /[\\s]/g,\n\t    commaSpaces = /[\\s]*,[\\s]*/,\n\t    hsrg = {hs: 1, rg: 1},\n\t    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n\t    idgen = 0,\n\t    idprefix = \"S\" + (+new Date).toString(36),\n\t    ID = function (el) {\n\t        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t    },\n\t    xlink = \"http://www.w3.org/1999/xlink\",\n\t    xmlns = \"http://www.w3.org/2000/svg\",\n\t    hub = {},\n\t    URL = Snap.url = function (url) {\n\t        return \"url('#\" + url + \"')\";\n\t    };\n\t\n\tfunction $(el, attr) {\n\t    if (attr) {\n\t        if (el == \"#text\") {\n\t            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (el == \"#comment\") {\n\t            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (typeof el == \"string\") {\n\t            el = $(el);\n\t        }\n\t        if (typeof attr == \"string\") {\n\t            if (el.nodeType == 1) {\n\t                if (attr.substring(0, 6) == \"xlink:\") {\n\t                    return el.getAttributeNS(xlink, attr.substring(6));\n\t                }\n\t                if (attr.substring(0, 4) == \"xml:\") {\n\t                    return el.getAttributeNS(xmlns, attr.substring(4));\n\t                }\n\t                return el.getAttribute(attr);\n\t            } else if (attr == \"text\") {\n\t                return el.nodeValue;\n\t            } else {\n\t                return null;\n\t            }\n\t        }\n\t        if (el.nodeType == 1) {\n\t            for (var key in attr) if (attr[has](key)) {\n\t                var val = Str(attr[key]);\n\t                if (val) {\n\t                    if (key.substring(0, 6) == \"xlink:\") {\n\t                        el.setAttributeNS(xlink, key.substring(6), val);\n\t                    } else if (key.substring(0, 4) == \"xml:\") {\n\t                        el.setAttributeNS(xmlns, key.substring(4), val);\n\t                    } else {\n\t                        el.setAttribute(key, val);\n\t                    }\n\t                } else {\n\t                    el.removeAttribute(key);\n\t                }\n\t            }\n\t        } else if (\"text\" in attr) {\n\t            el.nodeValue = attr.text;\n\t        }\n\t    } else {\n\t        el = glob.doc.createElementNS(xmlns, el);\n\t    }\n\t    return el;\n\t}\n\tSnap._.$ = $;\n\tSnap._.id = ID;\n\tfunction getAttrs(el) {\n\t    var attrs = el.attributes,\n\t        name,\n\t        out = {};\n\t    for (var i = 0; i < attrs.length; i++) {\n\t        if (attrs[i].namespaceURI == xlink) {\n\t            name = \"xlink:\";\n\t        } else {\n\t            name = \"\";\n\t        }\n\t        name += attrs[i].name;\n\t        out[name] = attrs[i].textContent;\n\t    }\n\t    return out;\n\t}\n\tfunction is(o, type) {\n\t    type = Str.prototype.toLowerCase.call(type);\n\t    if (type == \"finite\") {\n\t        return isFinite(o);\n\t    }\n\t    if (type == \"array\" &&\n\t        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t        return true;\n\t    }\n\t    return  (type == \"null\" && o === null) ||\n\t            (type == typeof o && o !== null) ||\n\t            (type == \"object\" && o === Object(o)) ||\n\t            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t}\n\t/*\\\n\t * Snap.format\n\t [ method ]\n\t **\n\t * Replaces construction of type `{<name>}` to the corresponding argument\n\t **\n\t - token (string) string to format\n\t - json (object) object which properties are used as a replacement\n\t = (string) formatted string\n\t > Usage\n\t | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t |     x: 10,\n\t |     y: 20,\n\t |     dim: {\n\t |         width: 40,\n\t |         height: 50,\n\t |         \"negative width\": -40\n\t |     }\n\t | }));\n\t\\*/\n\tSnap.format = (function () {\n\t    var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t        replacer = function (all, key, obj) {\n\t            var res = obj;\n\t            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                name = name || quotedName;\n\t                if (res) {\n\t                    if (name in res) {\n\t                        res = res[name];\n\t                    }\n\t                    typeof res == \"function\" && isFunc && (res = res());\n\t                }\n\t            });\n\t            res = (res == null || res == obj ? all : res) + \"\";\n\t            return res;\n\t        };\n\t    return function (str, obj) {\n\t        return Str(str).replace(tokenRegex, function (all, key) {\n\t            return replacer(all, key, obj);\n\t        });\n\t    };\n\t})();\n\tfunction clone(obj) {\n\t    if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t        return obj;\n\t    }\n\t    var res = new obj.constructor;\n\t    for (var key in obj) if (obj[has](key)) {\n\t        res[key] = clone(obj[key]);\n\t    }\n\t    return res;\n\t}\n\tSnap._.clone = clone;\n\tfunction repush(array, item) {\n\t    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t        return array.push(array.splice(i, 1)[0]);\n\t    }\n\t}\n\tfunction cacher(f, scope, postprocessor) {\n\t    function newf() {\n\t        var arg = Array.prototype.slice.call(arguments, 0),\n\t            args = arg.join(\"\\u2400\"),\n\t            cache = newf.cache = newf.cache || {},\n\t            count = newf.count = newf.count || [];\n\t        if (cache[has](args)) {\n\t            repush(count, args);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        count.length >= 1e3 && delete cache[count.shift()];\n\t        count.push(args);\n\t        cache[args] = f.apply(scope, arg);\n\t        return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t    }\n\t    return newf;\n\t}\n\tSnap._.cacher = cacher;\n\tfunction angle(x1, y1, x2, y2, x3, y3) {\n\t    if (x3 == null) {\n\t        var x = x1 - x2,\n\t            y = y1 - y2;\n\t        if (!x && !y) {\n\t            return 0;\n\t        }\n\t        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t    } else {\n\t        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t    }\n\t}\n\tfunction rad(deg) {\n\t    return deg % 360 * PI / 180;\n\t}\n\tfunction deg(rad) {\n\t    return rad * 180 / PI % 360;\n\t}\n\tfunction x_y() {\n\t    return this.x + S + this.y;\n\t}\n\tfunction x_y_w_h() {\n\t    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t}\n\t\n\t/*\\\n\t * Snap.rad\n\t [ method ]\n\t **\n\t * Transform angle to radians\n\t - deg (number) angle in degrees\n\t = (number) angle in radians\n\t\\*/\n\tSnap.rad = rad;\n\t/*\\\n\t * Snap.deg\n\t [ method ]\n\t **\n\t * Transform angle to degrees\n\t - rad (number) angle in radians\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.deg = deg;\n\t/*\\\n\t * Snap.sin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) sin\n\t\\*/\n\tSnap.sin = function (angle) {\n\t    return math.sin(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.tan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) tan\n\t\\*/\n\tSnap.tan = function (angle) {\n\t    return math.tan(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.cos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) cos\n\t\\*/\n\tSnap.cos = function (angle) {\n\t    return math.cos(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.asin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) asin in degrees\n\t\\*/\n\tSnap.asin = function (num) {\n\t    return Snap.deg(math.asin(num));\n\t};\n\t/*\\\n\t * Snap.acos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) acos in degrees\n\t\\*/\n\tSnap.acos = function (num) {\n\t    return Snap.deg(math.acos(num));\n\t};\n\t/*\\\n\t * Snap.atan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan in degrees\n\t\\*/\n\tSnap.atan = function (num) {\n\t    return Snap.deg(math.atan(num));\n\t};\n\t/*\\\n\t * Snap.atan2\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan2 in degrees\n\t\\*/\n\tSnap.atan2 = function (num) {\n\t    return Snap.deg(math.atan2(num));\n\t};\n\t/*\\\n\t * Snap.angle\n\t [ method ]\n\t **\n\t * Returns an angle between two or three points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t - x3 (number) #optional x coord of third point\n\t - y3 (number) #optional y coord of third point\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.angle = angle;\n\t/*\\\n\t * Snap.len\n\t [ method ]\n\t **\n\t * Returns distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len = function (x1, y1, x2, y2) {\n\t    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t};\n\t/*\\\n\t * Snap.len2\n\t [ method ]\n\t **\n\t * Returns squared distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len2 = function (x1, y1, x2, y2) {\n\t    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t};\n\t/*\\\n\t * Snap.closestPoint\n\t [ method ]\n\t **\n\t * Returns closest point to a given one on a given path.\n\t > Parameters\n\t - path (Element) path element\n\t - x (number) x coord of a point\n\t - y (number) y coord of a point\n\t = (object) in format\n\t {\n\t    x (number) x coord of the point on the path\n\t    y (number) y coord of the point on the path\n\t    length (number) length of the path to the point\n\t    distance (number) distance from the given point to the path\n\t }\n\t\\*/\n\t// Copied from http://bl.ocks.org/mbostock/8027637\n\tSnap.closestPoint = function (path, x, y) {\n\t    function distance2(p) {\n\t        var dx = p.x - x,\n\t            dy = p.y - y;\n\t        return dx * dx + dy * dy;\n\t    }\n\t    var pathNode = path.node,\n\t        pathLength = pathNode.getTotalLength(),\n\t        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t        best,\n\t        bestLength,\n\t        bestDistance = Infinity;\n\t\n\t    // linear scan for coarse approximation\n\t    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n\t        }\n\t    }\n\t\n\t    // binary search for precise estimate\n\t    precision *= .5;\n\t    while (precision > .5) {\n\t        var before,\n\t            after,\n\t            beforeLength,\n\t            afterLength,\n\t            beforeDistance,\n\t            afterDistance;\n\t        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n\t        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t            best = after, bestLength = afterLength, bestDistance = afterDistance;\n\t        } else {\n\t            precision *= .5;\n\t        }\n\t    }\n\t\n\t    best = {\n\t        x: best.x,\n\t        y: best.y,\n\t        length: bestLength,\n\t        distance: Math.sqrt(bestDistance)\n\t    };\n\t    return best;\n\t}\n\t/*\\\n\t * Snap.is\n\t [ method ]\n\t **\n\t * Handy replacement for the `typeof` operator\n\t - o (…) any object or primitive\n\t - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t = (boolean) `true` if given value is of given type\n\t\\*/\n\tSnap.is = is;\n\t/*\\\n\t * Snap.snapTo\n\t [ method ]\n\t **\n\t * Snaps given value to given grid\n\t - values (array|number) given array of values or step of the grid\n\t - value (number) value to adjust\n\t - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t = (number) adjusted value\n\t\\*/\n\tSnap.snapTo = function (values, value, tolerance) {\n\t    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t    if (is(values, \"array\")) {\n\t        var i = values.length;\n\t        while (i--) if (abs(values[i] - value) <= tolerance) {\n\t            return values[i];\n\t        }\n\t    } else {\n\t        values = +values;\n\t        var rem = value % values;\n\t        if (rem < tolerance) {\n\t            return value - rem;\n\t        }\n\t        if (rem > values - tolerance) {\n\t            return value - rem + values;\n\t        }\n\t    }\n\t    return value;\n\t};\n\t// Colour\n\t/*\\\n\t * Snap.getRGB\n\t [ method ]\n\t **\n\t * Parses color string as RGB object\n\t - color (string) color string in one of the following formats:\n\t # <ul>\n\t #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t # </ul>\n\t * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) true if string can't be parsed\n\t o }\n\t\\*/\n\tSnap.getRGB = cacher(function (colour) {\n\t    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    if (colour == \"none\") {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n\t    }\n\t    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t    if (!colour) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    var res,\n\t        red,\n\t        green,\n\t        blue,\n\t        opacity,\n\t        t,\n\t        values,\n\t        rgb = colour.match(colourRegExp);\n\t    if (rgb) {\n\t        if (rgb[2]) {\n\t            blue = toInt(rgb[2].substring(5), 16);\n\t            green = toInt(rgb[2].substring(3, 5), 16);\n\t            red = toInt(rgb[2].substring(1, 3), 16);\n\t        }\n\t        if (rgb[3]) {\n\t            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t        }\n\t        if (rgb[4]) {\n\t            values = rgb[4].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t        }\n\t        if (rgb[5]) {\n\t            values = rgb[5].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsb2rgb(red, green, blue, opacity);\n\t        }\n\t        if (rgb[6]) {\n\t            values = rgb[6].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsl2rgb(red, green, blue, opacity);\n\t        }\n\t        red = mmin(math.round(red), 255);\n\t        green = mmin(math.round(green), 255);\n\t        blue = mmin(math.round(blue), 255);\n\t        opacity = mmin(mmax(opacity, 0), 1);\n\t        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n\t        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t        return rgb;\n\t    }\n\t    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t}, Snap);\n\t/*\\\n\t * Snap.hsb\n\t [ method ]\n\t **\n\t * Converts HSB values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - b (number) value or brightness\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsb = cacher(function (h, s, b) {\n\t    return Snap.hsb2rgb(h, s, b).hex;\n\t});\n\t/*\\\n\t * Snap.hsl\n\t [ method ]\n\t **\n\t * Converts HSL values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsl = cacher(function (h, s, l) {\n\t    return Snap.hsl2rgb(h, s, l).hex;\n\t});\n\t/*\\\n\t * Snap.rgb\n\t [ method ]\n\t **\n\t * Converts RGB values to a hex representation of the color\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.rgb = cacher(function (r, g, b, o) {\n\t    if (is(o, \"finite\")) {\n\t        var round = math.round;\n\t        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t    }\n\t    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n\t});\n\tvar toHex = function (color) {\n\t    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t        red = \"rgb(255, 0, 0)\";\n\t    toHex = cacher(function (color) {\n\t        if (color.toLowerCase() == \"red\") {\n\t            return red;\n\t        }\n\t        i.style.color = red;\n\t        i.style.color = color;\n\t        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t        return out == red ? null : out;\n\t    });\n\t    return toHex(color);\n\t},\n\thsbtoString = function () {\n\t    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t},\n\thsltoString = function () {\n\t    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t},\n\trgbtoString = function () {\n\t    return this.opacity == 1 || this.opacity == null ?\n\t            this.hex :\n\t            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t},\n\tprepareRGB = function (r, g, b) {\n\t    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t        b = r.b;\n\t        g = r.g;\n\t        r = r.r;\n\t    }\n\t    if (g == null && is(r, string)) {\n\t        var clr = Snap.getRGB(r);\n\t        r = clr.r;\n\t        g = clr.g;\n\t        b = clr.b;\n\t    }\n\t    if (r > 1 || g > 1 || b > 1) {\n\t        r /= 255;\n\t        g /= 255;\n\t        b /= 255;\n\t    }\n\t    \n\t    return [r, g, b];\n\t},\n\tpackageRGB = function (r, g, b, o) {\n\t    r = math.round(r * 255);\n\t    g = math.round(g * 255);\n\t    b = math.round(b * 255);\n\t    var rgb = {\n\t        r: r,\n\t        g: g,\n\t        b: b,\n\t        opacity: is(o, \"finite\") ? o : 1,\n\t        hex: Snap.rgb(r, g, b),\n\t        toString: rgbtoString\n\t    };\n\t    is(o, \"finite\") && (rgb.opacity = o);\n\t    return rgb;\n\t};\n\t/*\\\n\t * Snap.color\n\t [ method ]\n\t **\n\t * Parses the color string and returns an object featuring the color's component values\n\t - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t = (object) Combined RGB/HSB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) `true` if string can't be parsed,\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     v (number) value (brightness),\n\t o     l (number) lightness\n\t o }\n\t\\*/\n\tSnap.color = function (clr) {\n\t    var rgb;\n\t    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t        rgb = Snap.hsb2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t        rgb = Snap.hsl2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else {\n\t        if (is(clr, \"string\")) {\n\t            clr = Snap.getRGB(clr);\n\t        }\n\t        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t            rgb = Snap.rgb2hsl(clr);\n\t            clr.h = rgb.h;\n\t            clr.s = rgb.s;\n\t            clr.l = rgb.l;\n\t            rgb = Snap.rgb2hsb(clr);\n\t            clr.v = rgb.b;\n\t        } else {\n\t            clr = {hex: \"none\"};\n\t            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            clr.error = 1;\n\t        }\n\t    }\n\t    clr.toString = rgbtoString;\n\t    return clr;\n\t};\n\t/*\\\n\t * Snap.hsb2rgb\n\t [ method ]\n\t **\n\t * Converts HSB values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - v (number) value or brightness\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsb2rgb = function (h, s, v, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t        v = h.b;\n\t        s = h.s;\n\t        o = h.o;\n\t        h = h.h;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = v * s;\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = v - C;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.hsl2rgb\n\t [ method ]\n\t **\n\t * Converts HSL values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsl2rgb = function (h, s, l, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t        l = h.l;\n\t        s = h.s;\n\t        h = h.h;\n\t    }\n\t    if (h > 1 || s > 1 || l > 1) {\n\t        h /= 360;\n\t        s /= 100;\n\t        l /= 100;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = 2 * s * (l < .5 ? l : 1 - l);\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = l - C / 2;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.rgb2hsb\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSB object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSB object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     b (number) brightness\n\t o }\n\t\\*/\n\tSnap.rgb2hsb = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, V, C;\n\t    V = mmax(r, g, b);\n\t    C = V - mmin(r, g, b);\n\t    H = (C == 0 ? null :\n\t         V == r ? (g - b) / C :\n\t         V == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4\n\t        );\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    S = C == 0 ? 0 : C / V;\n\t    return {h: H, s: S, b: V, toString: hsbtoString};\n\t};\n\t/*\\\n\t * Snap.rgb2hsl\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSL object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSL object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     l (number) luminosity\n\t o }\n\t\\*/\n\tSnap.rgb2hsl = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, L, M, m, C;\n\t    M = mmax(r, g, b);\n\t    m = mmin(r, g, b);\n\t    C = M - m;\n\t    H = (C == 0 ? null :\n\t         M == r ? (g - b) / C :\n\t         M == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4);\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    L = (M + m) / 2;\n\t    S = (C == 0 ? 0 :\n\t         L < .5 ? C / (2 * L) :\n\t                  C / (2 - 2 * L));\n\t    return {h: H, s: S, l: L, toString: hsltoString};\n\t};\n\t\n\t// Transformations\n\t/*\\\n\t * Snap.parsePathString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given path string into an array of arrays of path segments\n\t - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t = (array) array of segments\n\t\\*/\n\tSnap.parsePathString = function (pathString) {\n\t    if (!pathString) {\n\t        return null;\n\t    }\n\t    var pth = Snap.path(pathString);\n\t    if (pth.arr) {\n\t        return Snap.path.clone(pth.arr);\n\t    }\n\t    \n\t    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n\t        data = [];\n\t    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(pathString);\n\t    }\n\t    if (!data.length) {\n\t        Str(pathString).replace(pathCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            if (name == \"m\" && params.length > 2) {\n\t                data.push([b].concat(params.splice(0, 2)));\n\t                name = \"l\";\n\t                b = b == \"m\" ? \"l\" : \"L\";\n\t            }\n\t            if (name == \"o\" && params.length == 1) {\n\t                data.push([b, params[0]]);\n\t            }\n\t            if (name == \"r\") {\n\t                data.push([b].concat(params));\n\t            } else while (params.length >= paramCounts[name]) {\n\t                data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                if (!paramCounts[name]) {\n\t                    break;\n\t                }\n\t            }\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    pth.arr = Snap.path.clone(data);\n\t    return data;\n\t};\n\t/*\\\n\t * Snap.parseTransformString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given transform string into an array of transformations\n\t - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t = (array) array of transformations\n\t\\*/\n\tvar parseTransformString = Snap.parseTransformString = function (TString) {\n\t    if (!TString) {\n\t        return null;\n\t    }\n\t    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t        data = [];\n\t    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(TString);\n\t    }\n\t    if (!data.length) {\n\t        Str(TString).replace(tCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            data.push([b].concat(params));\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    return data;\n\t};\n\tfunction svgTransform2string(tstr) {\n\t    var res = [];\n\t    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t        params = params.split(/\\s*,\\s*|\\s+/);\n\t        if (name == \"rotate\" && params.length == 1) {\n\t            params.push(0, 0);\n\t        }\n\t        if (name == \"scale\") {\n\t            if (params.length > 2) {\n\t                params = params.slice(0, 2);\n\t            } else if (params.length == 2) {\n\t                params.push(0, 0);\n\t            }\n\t            if (params.length == 1) {\n\t                params.push(params[0], 0, 0);\n\t            }\n\t        }\n\t        if (name == \"skewX\") {\n\t            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t        } else if (name == \"skewY\") {\n\t            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t        } else {\n\t            res.push([name.charAt(0)].concat(params));\n\t        }\n\t        return all;\n\t    });\n\t    return res;\n\t}\n\tSnap._.svgTransform2string = svgTransform2string;\n\tSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\tfunction transform2matrix(tstr, bbox) {\n\t    var tdata = parseTransformString(tstr),\n\t        m = new Snap.Matrix;\n\t    if (tdata) {\n\t        for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t            var t = tdata[i],\n\t                tlen = t.length,\n\t                command = Str(t[0]).toLowerCase(),\n\t                absolute = t[0] != command,\n\t                inver = absolute ? m.invert() : 0,\n\t                x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                bb;\n\t            if (command == \"t\" && tlen == 2){\n\t                m.translate(t[1], 0);\n\t            } else if (command == \"t\" && tlen == 3) {\n\t                if (absolute) {\n\t                    x1 = inver.x(0, 0);\n\t                    y1 = inver.y(0, 0);\n\t                    x2 = inver.x(t[1], t[2]);\n\t                    y2 = inver.y(t[1], t[2]);\n\t                    m.translate(x2 - x1, y2 - y1);\n\t                } else {\n\t                    m.translate(t[1], t[2]);\n\t                }\n\t            } else if (command == \"r\") {\n\t                if (tlen == 2) {\n\t                    bb = bb || bbox;\n\t                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.rotate(t[1], x2, y2);\n\t                    } else {\n\t                        m.rotate(t[1], t[2], t[3]);\n\t                    }\n\t                }\n\t            } else if (command == \"s\") {\n\t                if (tlen == 2 || tlen == 3) {\n\t                    bb = bb || bbox;\n\t                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.scale(t[1], t[1], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[1], t[2], t[3]);\n\t                    }\n\t                } else if (tlen == 5) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[3], t[4]);\n\t                        y2 = inver.y(t[3], t[4]);\n\t                        m.scale(t[1], t[2], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[2], t[3], t[4]);\n\t                    }\n\t                }\n\t            } else if (command == \"m\" && tlen == 7) {\n\t                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t            }\n\t        }\n\t    }\n\t    return m;\n\t}\n\tSnap._.transform2matrix = transform2matrix;\n\tSnap._unit2px = unit2px;\n\tvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n\t    function (a, b) {\n\t        var adown = a.nodeType == 9 ? a.documentElement : a,\n\t            bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (\n\t                adown.contains ?\n\t                    adown.contains(bup) :\n\t                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n\t            ));\n\t    } :\n\t    function (a, b) {\n\t        if (b) {\n\t            while (b) {\n\t                b = b.parentNode;\n\t                if (b == a) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\tfunction getSomeDefs(el) {\n\t    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n\t            (el.node.parentNode && wrap(el.node.parentNode)) ||\n\t            Snap.select(\"svg\") ||\n\t            Snap(0, 0),\n\t        pdefs = p.select(\"defs\"),\n\t        defs  = pdefs == null ? false : pdefs.node;\n\t    if (!defs) {\n\t        defs = make(\"defs\", p.node).node;\n\t    }\n\t    return defs;\n\t}\n\tfunction getSomeSVG(el) {\n\t    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t}\n\tSnap._.getSomeDefs = getSomeDefs;\n\tSnap._.getSomeSVG = getSomeSVG;\n\tfunction unit2px(el, name, value) {\n\t    var svg = getSomeSVG(el).node,\n\t        out = {},\n\t        mgr = svg.querySelector(\".svg---mgr\");\n\t    if (!mgr) {\n\t        mgr = $(\"rect\");\n\t        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n\t        svg.appendChild(mgr);\n\t    }\n\t    function getW(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {width: val});\n\t        try {\n\t            return mgr.getBBox().width;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function getH(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {height: val});\n\t        try {\n\t            return mgr.getBBox().height;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function set(nam, f) {\n\t        if (name == null) {\n\t            out[nam] = f(el.attr(nam) || 0);\n\t        } else if (nam == name) {\n\t            out = f(value == null ? el.attr(nam) || 0 : value);\n\t        }\n\t    }\n\t    switch (el.type) {\n\t        case \"rect\":\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        case \"image\":\n\t            set(\"width\", getW);\n\t            set(\"height\", getH);\n\t        case \"text\":\n\t            set(\"x\", getW);\n\t            set(\"y\", getH);\n\t        break;\n\t        case \"circle\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"r\", getW);\n\t        break;\n\t        case \"ellipse\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        break;\n\t        case \"line\":\n\t            set(\"x1\", getW);\n\t            set(\"x2\", getW);\n\t            set(\"y1\", getH);\n\t            set(\"y2\", getH);\n\t        break;\n\t        case \"marker\":\n\t            set(\"refX\", getW);\n\t            set(\"markerWidth\", getW);\n\t            set(\"refY\", getH);\n\t            set(\"markerHeight\", getH);\n\t        break;\n\t        case \"radialGradient\":\n\t            set(\"fx\", getW);\n\t            set(\"fy\", getH);\n\t        break;\n\t        case \"tspan\":\n\t            set(\"dx\", getW);\n\t            set(\"dy\", getH);\n\t        break;\n\t        default:\n\t            set(name, getW);\n\t    }\n\t    svg.removeChild(mgr);\n\t    return out;\n\t}\n\t/*\\\n\t * Snap.select\n\t [ method ]\n\t **\n\t * Wraps a DOM element specified by CSS selector as @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.select = function (query) {\n\t    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t    return wrap(glob.doc.querySelector(query));\n\t};\n\t/*\\\n\t * Snap.selectAll\n\t [ method ]\n\t **\n\t * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.selectAll = function (query) {\n\t    var nodelist = glob.doc.querySelectorAll(query),\n\t        set = (Snap.set || Array)();\n\t    for (var i = 0; i < nodelist.length; i++) {\n\t        set.push(wrap(nodelist[i]));\n\t    }\n\t    return set;\n\t};\n\t\n\tfunction add2group(list) {\n\t    if (!is(list, \"array\")) {\n\t        list = Array.prototype.slice.call(arguments, 0);\n\t    }\n\t    var i = 0,\n\t        j = 0,\n\t        node = this.node;\n\t    while (this[i]) delete this[i++];\n\t    for (i = 0; i < list.length; i++) {\n\t        if (list[i].type == \"set\") {\n\t            list[i].forEach(function (el) {\n\t                node.appendChild(el.node);\n\t            });\n\t        } else {\n\t            node.appendChild(list[i].node);\n\t        }\n\t    }\n\t    var children = node.childNodes;\n\t    for (i = 0; i < children.length; i++) {\n\t        this[j++] = wrap(children[i]);\n\t    }\n\t    return this;\n\t}\n\t// Hub garbage collector every 10s\n\tsetInterval(function () {\n\t    for (var key in hub) if (hub[has](key)) {\n\t        var el = hub[key],\n\t            node = el.node;\n\t        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t            delete hub[key];\n\t        }\n\t    }\n\t}, 1e4);\n\tfunction Element(el) {\n\t    if (el.snap in hub) {\n\t        return hub[el.snap];\n\t    }\n\t    var svg;\n\t    try {\n\t        svg = el.ownerSVGElement;\n\t    } catch(e) {}\n\t    /*\\\n\t     * Element.node\n\t     [ property (object) ]\n\t     **\n\t     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t     > Usage\n\t     | // draw a circle at coordinate 10,10 with radius of 10\n\t     | var c = paper.circle(10, 10, 10);\n\t     | c.node.onclick = function () {\n\t     |     c.attr(\"fill\", \"red\");\n\t     | };\n\t    \\*/\n\t    this.node = el;\n\t    if (svg) {\n\t        this.paper = new Paper(svg);\n\t    }\n\t    /*\\\n\t     * Element.type\n\t     [ property (string) ]\n\t     **\n\t     * SVG tag name of the given element.\n\t    \\*/\n\t    this.type = el.tagName || el.nodeName;\n\t    var id = this.id = ID(this);\n\t    this.anims = {};\n\t    this._ = {\n\t        transform: []\n\t    };\n\t    el.snap = id;\n\t    hub[id] = this;\n\t    if (this.type == \"g\") {\n\t        this.add = add2group;\n\t    }\n\t    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n\t        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n\t            this[method] = Paper.prototype[method];\n\t        }\n\t    }\n\t}\n\t   /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Gets or sets given attributes of the element.\n\t     **\n\t     - params (object) contains key-value pairs of attributes you want to set\n\t     * or\n\t     - param (string) name of the attribute\n\t     = (Element) the current element\n\t     * or\n\t     = (string) value of attribute\n\t     > Usage\n\t     | el.attr({\n\t     |     fill: \"#fc0\",\n\t     |     stroke: \"#000\",\n\t     |     strokeWidth: 2, // CamelCase...\n\t     |     \"fill-opacity\": 0.5, // or dash-separated names\n\t     |     width: \"*=2\" // prefixed values\n\t     | });\n\t     | console.log(el.attr(\"fill\")); // #fc0\n\t     * Prefixed values in format `\"+=10\"` supported. All four operations\n\t     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t     * and `-`: `\"+=2em\"`.\n\t    \\*/\n\t    Element.prototype.attr = function (params, value) {\n\t        var el = this,\n\t            node = el.node;\n\t        if (!params) {\n\t            if (node.nodeType != 1) {\n\t                return {\n\t                    text: node.nodeValue\n\t                };\n\t            }\n\t            var attr = node.attributes,\n\t                out = {};\n\t            for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                out[attr[i].nodeName] = attr[i].nodeValue;\n\t            }\n\t            return out;\n\t        }\n\t        if (is(params, \"string\")) {\n\t            if (arguments.length > 1) {\n\t                var json = {};\n\t                json[params] = value;\n\t                params = json;\n\t            } else {\n\t                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t            }\n\t        }\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                eve(\"snap.util.attr.\" + att, el, params[att]);\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t/*\\\n\t * Snap.parse\n\t [ method ]\n\t **\n\t * Parses SVG fragment and converts it into a @Fragment\n\t **\n\t - svg (string) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.parse = function (svg) {\n\t    var f = glob.doc.createDocumentFragment(),\n\t        full = true,\n\t        div = glob.doc.createElement(\"div\");\n\t    svg = Str(svg);\n\t    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t        svg = \"<svg>\" + svg + \"</svg>\";\n\t        full = false;\n\t    }\n\t    div.innerHTML = svg;\n\t    svg = div.getElementsByTagName(\"svg\")[0];\n\t    if (svg) {\n\t        if (full) {\n\t            f = svg;\n\t        } else {\n\t            while (svg.firstChild) {\n\t                f.appendChild(svg.firstChild);\n\t            }\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\tfunction Fragment(frag) {\n\t    this.node = frag;\n\t}\n\t/*\\\n\t * Snap.fragment\n\t [ method ]\n\t **\n\t * Creates a DOM fragment from a given list of elements or strings\n\t **\n\t - varargs (…) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.fragment = function () {\n\t    var args = Array.prototype.slice.call(arguments, 0),\n\t        f = glob.doc.createDocumentFragment();\n\t    for (var i = 0, ii = args.length; i < ii; i++) {\n\t        var item = args[i];\n\t        if (item.node && item.node.nodeType) {\n\t            f.appendChild(item.node);\n\t        }\n\t        if (item.nodeType) {\n\t            f.appendChild(item);\n\t        }\n\t        if (typeof item == \"string\") {\n\t            f.appendChild(Snap.parse(item).node);\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\t\n\tfunction make(name, parent) {\n\t    var res = $(name);\n\t    parent.appendChild(res);\n\t    var el = wrap(res);\n\t    return el;\n\t}\n\tfunction Paper(w, h) {\n\t    var res,\n\t        desc,\n\t        defs,\n\t        proto = Paper.prototype;\n\t    if (w && w.tagName == \"svg\") {\n\t        if (w.snap in hub) {\n\t            return hub[w.snap];\n\t        }\n\t        var doc = w.ownerDocument;\n\t        res = new Element(w);\n\t        desc = w.getElementsByTagName(\"desc\")[0];\n\t        defs = w.getElementsByTagName(\"defs\")[0];\n\t        if (!desc) {\n\t            desc = $(\"desc\");\n\t            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t            res.node.appendChild(desc);\n\t        }\n\t        if (!defs) {\n\t            defs = $(\"defs\");\n\t            res.node.appendChild(defs);\n\t        }\n\t        res.defs = defs;\n\t        for (var key in proto) if (proto[has](key)) {\n\t            res[key] = proto[key];\n\t        }\n\t        res.paper = res.root = res;\n\t    } else {\n\t        res = make(\"svg\", glob.doc.body);\n\t        $(res.node, {\n\t            height: h,\n\t            version: 1.1,\n\t            width: w,\n\t            xmlns: xmlns\n\t        });\n\t    }\n\t    return res;\n\t}\n\tfunction wrap(dom) {\n\t    if (!dom) {\n\t        return dom;\n\t    }\n\t    if (dom instanceof Element || dom instanceof Fragment) {\n\t        return dom;\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t        return new Paper(dom);\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t    }\n\t    return new Element(dom);\n\t}\n\t\n\tSnap._.make = make;\n\tSnap._.wrap = wrap;\n\t/*\\\n\t * Paper.el\n\t [ method ]\n\t **\n\t * Creates an element on paper with a given name and no attributes\n\t **\n\t - name (string) tag name\n\t - attr (object) attributes\n\t = (Element) the current element\n\t > Usage\n\t | var c = paper.circle(10, 10, 10); // is the same as...\n\t | var c = paper.el(\"circle\").attr({\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t | // and the same as\n\t | var c = paper.el(\"circle\", {\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t\\*/\n\tPaper.prototype.el = function (name, attr) {\n\t    var el = make(name, this.node);\n\t    attr && el.attr(attr);\n\t    return el;\n\t};\n\t/*\\\n\t * Element.children\n\t [ method ]\n\t **\n\t * Returns array of all the children of the element.\n\t = (array) array of Elements\n\t\\*/\n\tElement.prototype.children = function () {\n\t    var out = [],\n\t        ch = this.node.childNodes;\n\t    for (var i = 0, ii = ch.length; i < ii; i++) {\n\t        out[i] = Snap(ch[i]);\n\t    }\n\t    return out;\n\t};\n\tfunction jsonFiller(root, o) {\n\t    for (var i = 0, ii = root.length; i < ii; i++) {\n\t        var item = {\n\t                type: root[i].type,\n\t                attr: root[i].attr()\n\t            },\n\t            children = root[i].children();\n\t        o.push(item);\n\t        if (children.length) {\n\t            jsonFiller(children, item.childNodes = []);\n\t        }\n\t    }\n\t}\n\t/*\\\n\t * Element.toJSON\n\t [ method ]\n\t **\n\t * Returns object representation of the given element and all its children.\n\t = (object) in format\n\t o {\n\t o     type (string) this.type,\n\t o     attr (object) attributes map,\n\t o     childNodes (array) optional array of children in the same format\n\t o }\n\t\\*/\n\tElement.prototype.toJSON = function () {\n\t    var out = [];\n\t    jsonFiller([this], out);\n\t    return out[0];\n\t};\n\t// default\n\teve.on(\"snap.util.getattr\", function () {\n\t    var att = eve.nt();\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    var css = att.replace(/[A-Z]/g, function (letter) {\n\t        return \"-\" + letter.toLowerCase();\n\t    });\n\t    if (cssAttr[has](css)) {\n\t        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t    } else {\n\t        return $(this.node, att);\n\t    }\n\t});\n\tvar cssAttr = {\n\t    \"alignment-baseline\": 0,\n\t    \"baseline-shift\": 0,\n\t    \"clip\": 0,\n\t    \"clip-path\": 0,\n\t    \"clip-rule\": 0,\n\t    \"color\": 0,\n\t    \"color-interpolation\": 0,\n\t    \"color-interpolation-filters\": 0,\n\t    \"color-profile\": 0,\n\t    \"color-rendering\": 0,\n\t    \"cursor\": 0,\n\t    \"direction\": 0,\n\t    \"display\": 0,\n\t    \"dominant-baseline\": 0,\n\t    \"enable-background\": 0,\n\t    \"fill\": 0,\n\t    \"fill-opacity\": 0,\n\t    \"fill-rule\": 0,\n\t    \"filter\": 0,\n\t    \"flood-color\": 0,\n\t    \"flood-opacity\": 0,\n\t    \"font\": 0,\n\t    \"font-family\": 0,\n\t    \"font-size\": 0,\n\t    \"font-size-adjust\": 0,\n\t    \"font-stretch\": 0,\n\t    \"font-style\": 0,\n\t    \"font-variant\": 0,\n\t    \"font-weight\": 0,\n\t    \"glyph-orientation-horizontal\": 0,\n\t    \"glyph-orientation-vertical\": 0,\n\t    \"image-rendering\": 0,\n\t    \"kerning\": 0,\n\t    \"letter-spacing\": 0,\n\t    \"lighting-color\": 0,\n\t    \"marker\": 0,\n\t    \"marker-end\": 0,\n\t    \"marker-mid\": 0,\n\t    \"marker-start\": 0,\n\t    \"mask\": 0,\n\t    \"opacity\": 0,\n\t    \"overflow\": 0,\n\t    \"pointer-events\": 0,\n\t    \"shape-rendering\": 0,\n\t    \"stop-color\": 0,\n\t    \"stop-opacity\": 0,\n\t    \"stroke\": 0,\n\t    \"stroke-dasharray\": 0,\n\t    \"stroke-dashoffset\": 0,\n\t    \"stroke-linecap\": 0,\n\t    \"stroke-linejoin\": 0,\n\t    \"stroke-miterlimit\": 0,\n\t    \"stroke-opacity\": 0,\n\t    \"stroke-width\": 0,\n\t    \"text-anchor\": 0,\n\t    \"text-decoration\": 0,\n\t    \"text-rendering\": 0,\n\t    \"unicode-bidi\": 0,\n\t    \"visibility\": 0,\n\t    \"word-spacing\": 0,\n\t    \"writing-mode\": 0\n\t};\n\t\n\teve.on(\"snap.util.attr\", function (value) {\n\t    var att = eve.nt(),\n\t        attr = {};\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    attr[att] = value;\n\t    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t            return letter.toUpperCase();\n\t        }),\n\t        css = att.replace(/[A-Z]/g, function (letter) {\n\t            return \"-\" + letter.toLowerCase();\n\t        });\n\t    if (cssAttr[has](css)) {\n\t        this.node.style[style] = value == null ? E : value;\n\t    } else {\n\t        $(this.node, attr);\n\t    }\n\t});\n\t(function (proto) {}(Paper.prototype));\n\t\n\t// simple ajax\n\t/*\\\n\t * Snap.ajax\n\t [ method ]\n\t **\n\t * Simple implementation of Ajax\n\t **\n\t - url (string) URL\n\t - postData (object|string) data for post request\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t * or\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t\\*/\n\tSnap.ajax = function (url, postData, callback, scope){\n\t    var req = new XMLHttpRequest,\n\t        id = ID();\n\t    if (req) {\n\t        if (is(postData, \"function\")) {\n\t            scope = callback;\n\t            callback = postData;\n\t            postData = null;\n\t        } else if (is(postData, \"object\")) {\n\t            var pd = [];\n\t            for (var key in postData) if (postData.hasOwnProperty(key)) {\n\t                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t            }\n\t            postData = pd.join(\"&\");\n\t        }\n\t        req.open((postData ? \"POST\" : \"GET\"), url, true);\n\t        if (postData) {\n\t            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t        }\n\t        if (callback) {\n\t            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t        }\n\t        req.onreadystatechange = function() {\n\t            if (req.readyState != 4) return;\n\t            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t        };\n\t        if (req.readyState == 4) {\n\t            return req;\n\t        }\n\t        req.send(postData);\n\t        return req;\n\t    }\n\t};\n\t/*\\\n\t * Snap.load\n\t [ method ]\n\t **\n\t * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t **\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t\\*/\n\tSnap.load = function (url, callback, scope) {\n\t    Snap.ajax(url, function (req) {\n\t        var f = Snap.parse(req.responseText);\n\t        scope ? callback.call(scope, f) : callback(f);\n\t    });\n\t};\n\tvar getOffset = function (elem) {\n\t    var box = elem.getBoundingClientRect(),\n\t        doc = elem.ownerDocument,\n\t        body = doc.body,\n\t        docElem = doc.documentElement,\n\t        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t    return {\n\t        y: top,\n\t        x: left\n\t    };\n\t};\n\t/*\\\n\t * Snap.getElementByPoint\n\t [ method ]\n\t **\n\t * Returns you topmost element under given point.\n\t **\n\t = (object) Snap element object\n\t - x (number) x coordinate from the top left corner of the window\n\t - y (number) y coordinate from the top left corner of the window\n\t > Usage\n\t | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t\\*/\n\tSnap.getElementByPoint = function (x, y) {\n\t    var paper = this,\n\t        svg = paper.canvas,\n\t        target = glob.doc.elementFromPoint(x, y);\n\t    if (glob.win.opera && target.tagName == \"svg\") {\n\t        var so = getOffset(target),\n\t            sr = target.createSVGRect();\n\t        sr.x = x - so.x;\n\t        sr.y = y - so.y;\n\t        sr.width = sr.height = 1;\n\t        var hits = target.getIntersectionList(sr, null);\n\t        if (hits.length) {\n\t            target = hits[hits.length - 1];\n\t        }\n\t    }\n\t    if (!target) {\n\t        return null;\n\t    }\n\t    return wrap(target);\n\t};\n\t/*\\\n\t * Snap.plugin\n\t [ method ]\n\t **\n\t * Let you write plugins. You pass in a function with five arguments, like this:\n\t | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t |     Snap.newmethod = function () {};\n\t |     Element.prototype.newmethod = function () {};\n\t |     Paper.prototype.newmethod = function () {};\n\t | });\n\t * Inside the function you have access to all main objects (and their\n\t * prototypes). This allow you to extend anything you want.\n\t **\n\t - f (function) your plugin body\n\t\\*/\n\tSnap.plugin = function (f) {\n\t    f(Snap, Element, Paper, glob, Fragment);\n\t};\n\tglob.win.Snap = Snap;\n\treturn Snap;\n\t}(window || this));\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        Str = String,\n\t        unit2px = Snap._unit2px,\n\t        $ = Snap._.$,\n\t        make = Snap._.make,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        has = \"hasOwnProperty\",\n\t        wrap = Snap._.wrap;\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Returns the bounding box descriptor for the given element\n\t     **\n\t     = (object) bounding box descriptor:\n\t     o {\n\t     o     cx: (number) x of the center,\n\t     o     cy: (number) x of the center,\n\t     o     h: (number) height,\n\t     o     height: (number) height,\n\t     o     path: (string) path command for the box,\n\t     o     r0: (number) radius of a circle that fully encloses the box,\n\t     o     r1: (number) radius of the smallest circle that can be enclosed,\n\t     o     r2: (number) radius of the largest circle that can be enclosed,\n\t     o     vb: (string) box as a viewbox command,\n\t     o     w: (number) width,\n\t     o     width: (number) width,\n\t     o     x2: (number) x of the right side,\n\t     o     x: (number) x of the left side,\n\t     o     y2: (number) y of the bottom edge,\n\t     o     y: (number) y of the top edge\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (!Snap.Matrix || !Snap.path) {\n\t            return this.node.getBBox();\n\t        }\n\t        var el = this,\n\t            m = new Snap.Matrix;\n\t        if (el.removed) {\n\t            return Snap._.box();\n\t        }\n\t        while (el.type == \"use\") {\n\t            if (!isWithoutTransform) {\n\t                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t            }\n\t            if (el.original) {\n\t                el = el.original;\n\t            } else {\n\t                var href = el.attr(\"xlink:href\");\n\t                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t            }\n\t        }\n\t        var _ = el._,\n\t            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t        try {\n\t            if (isWithoutTransform) {\n\t                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                return Snap._.box(_.bboxwt);\n\t            } else {\n\t                el.realPath = pathfinder(el);\n\t                el.matrix = el.transform().localMatrix;\n\t                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                return Snap._.box(_.bbox);\n\t            }\n\t        } catch (e) {\n\t            // Firefox doesn’t give you bbox of hidden element\n\t            return Snap._.box();\n\t        }\n\t    };\n\t    var propString = function () {\n\t        return this.string;\n\t    };\n\t    function extractTransform(el, tstr) {\n\t        if (tstr == null) {\n\t            var doReturn = true;\n\t            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                tstr = el.node.getAttribute(\"gradientTransform\");\n\t            } else if (el.type == \"pattern\") {\n\t                tstr = el.node.getAttribute(\"patternTransform\");\n\t            } else {\n\t                tstr = el.node.getAttribute(\"transform\");\n\t            }\n\t            if (!tstr) {\n\t                return new Snap.Matrix;\n\t            }\n\t            tstr = Snap._.svgTransform2string(tstr);\n\t        } else {\n\t            if (!Snap._.rgTransform.test(tstr)) {\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            }\n\t            if (is(tstr, \"array\")) {\n\t                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t            }\n\t            el._.transform = tstr;\n\t        }\n\t        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t        if (doReturn) {\n\t            return m;\n\t        } else {\n\t            el.matrix = m;\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Gets or sets transformation of the element\n\t     **\n\t     - tstr (string) transform string in Snap or SVG format\n\t     = (Element) the current element\n\t     * or\n\t     = (object) transformation descriptor:\n\t     o {\n\t     o     string (string) transform string,\n\t     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t     o     global (string) global transformation as string,\n\t     o     local (string) local transformation as string,\n\t     o     toString (function) returns `string` property\n\t     o }\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            var papa = this,\n\t                global = new Snap.Matrix(this.node.getCTM()),\n\t                local = extractTransform(this),\n\t                ms = [local],\n\t                m = new Snap.Matrix,\n\t                i,\n\t                localString = local.toTransformString(),\n\t                string = Str(local) == Str(this.matrix) ?\n\t                            Str(_.transform) : localString;\n\t            while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                ms.push(extractTransform(papa));\n\t            }\n\t            i = ms.length;\n\t            while (i--) {\n\t                m.add(ms[i]);\n\t            }\n\t            return {\n\t                string: string,\n\t                globalMatrix: global,\n\t                totalMatrix: m,\n\t                localMatrix: local,\n\t                diffMatrix: global.clone().add(local.invert()),\n\t                global: global.toTransformString(),\n\t                total: m.toTransformString(),\n\t                local: localString,\n\t                toString: propString\n\t            };\n\t        }\n\t        if (tstr instanceof Snap.Matrix) {\n\t            this.matrix = tstr;\n\t            this._.transform = tstr.toTransformString();\n\t        } else {\n\t            extractTransform(this, tstr);\n\t        }\n\t\n\t        if (this.node) {\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                $(this.node, {gradientTransform: this.matrix});\n\t            } else if (this.type == \"pattern\") {\n\t                $(this.node, {patternTransform: this.matrix});\n\t            } else {\n\t                $(this.node, {transform: this.matrix});\n\t            }\n\t        }\n\t\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.parent\n\t     [ method ]\n\t     **\n\t     * Returns the element's parent\n\t     **\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.parent = function () {\n\t        return wrap(this.node.parentNode);\n\t    };\n\t    /*\\\n\t     * Element.append\n\t     [ method ]\n\t     **\n\t     * Appends the given element to current one\n\t     **\n\t     - el (Element|Set) element to append\n\t     = (Element) the parent element\n\t    \\*/\n\t    /*\\\n\t     * Element.add\n\t     [ method ]\n\t     **\n\t     * See @Element.append\n\t    \\*/\n\t    elproto.append = elproto.add = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    it.add(el);\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            this.node.appendChild(el.node);\n\t            el.paper = this.paper;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.appendTo\n\t     [ method ]\n\t     **\n\t     * Appends the current element to the given one\n\t     **\n\t     - el (Element) parent element to append to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.appendTo = function (el) {\n\t        if (el) {\n\t            el = wrap(el);\n\t            el.append(this);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prepend\n\t     [ method ]\n\t     **\n\t     * Prepends the given element to the current one\n\t     **\n\t     - el (Element) element to prepend\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.prepend = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this,\n\t                    first;\n\t                el.forEach(function (el) {\n\t                    if (first) {\n\t                        first.after(el);\n\t                    } else {\n\t                        it.prepend(el);\n\t                    }\n\t                    first = el;\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.insertBefore(el.node, this.node.firstChild);\n\t            this.add && this.add();\n\t            el.paper = this.paper;\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prependTo\n\t     [ method ]\n\t     **\n\t     * Prepends the current element to the given one\n\t     **\n\t     - el (Element) parent element to prepend to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.prependTo = function (el) {\n\t        el = wrap(el);\n\t        el.prepend(this);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.before\n\t     [ method ]\n\t     **\n\t     * Inserts given element before the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.before = function (el) {\n\t        if (el.type == \"set\") {\n\t            var it = this;\n\t            el.forEach(function (el) {\n\t                var parent = el.parent();\n\t                it.node.parentNode.insertBefore(el.node, it.node);\n\t                parent && parent.add();\n\t            });\n\t            this.parent().add();\n\t            return this;\n\t        }\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        this.node.parentNode.insertBefore(el.node, this.node);\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.after\n\t     [ method ]\n\t     **\n\t     * Inserts given element after the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.after = function (el) {\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        if (this.node.nextSibling) {\n\t            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t        } else {\n\t            this.node.parentNode.appendChild(el.node);\n\t        }\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertBefore = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertAfter = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the DOM\n\t     = (Element) the detached element\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var parent = this.parent();\n\t        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t        delete this.paper;\n\t        this.removed = true;\n\t        parent && parent.add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.select\n\t     [ method ]\n\t     **\n\t     * Gathers the nested @Element matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.select = function (query) {\n\t        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t        return wrap(this.node.querySelector(query));\n\t    };\n\t    /*\\\n\t     * Element.selectAll\n\t     [ method ]\n\t     **\n\t     * Gathers nested @Element objects matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Set|array) result of query selection\n\t    \\*/\n\t    elproto.selectAll = function (query) {\n\t        var nodelist = this.node.querySelectorAll(query),\n\t            set = (Snap.set || Array)();\n\t        for (var i = 0; i < nodelist.length; i++) {\n\t            set.push(wrap(nodelist[i]));\n\t        }\n\t        return set;\n\t    };\n\t    /*\\\n\t     * Element.asPX\n\t     [ method ]\n\t     **\n\t     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t     **\n\t     - attr (string) attribute name\n\t     - value (string) #optional attribute value\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.asPX = function (attr, value) {\n\t        if (value == null) {\n\t            value = this.attr(attr);\n\t        }\n\t        return +unit2px(this, attr, value);\n\t    };\n\t    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t    /*\\\n\t     * Element.use\n\t     [ method ]\n\t     **\n\t     * Creates a `<use>` element linked to the current element\n\t     **\n\t     = (Element) the `<use>` element\n\t    \\*/\n\t    elproto.use = function () {\n\t        var use,\n\t            id = this.node.id;\n\t        if (!id) {\n\t            id = this.id;\n\t            $(this.node, {\n\t                id: id\n\t            });\n\t        }\n\t        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n\t            this.type == \"pattern\") {\n\t            use = make(this.type, this.node.parentNode);\n\t        } else {\n\t            use = make(\"use\", this.node.parentNode);\n\t        }\n\t        $(use.node, {\n\t            \"xlink:href\": \"#\" + id\n\t        });\n\t        use.original = this;\n\t        return use;\n\t    };\n\t    function fixids(el) {\n\t        var els = el.selectAll(\"*\"),\n\t            it,\n\t            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t            ids = [],\n\t            uses = {};\n\t        function urltest(it, name) {\n\t            var val = $(it.node, name);\n\t            val = val && val.match(url);\n\t            val = val && val[2];\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    var attr = {};\n\t                    attr[name] = URL(id);\n\t                    $(it.node, attr);\n\t                });\n\t            }\n\t        }\n\t        function linktest(it) {\n\t            var val = $(it.node, \"xlink:href\");\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    it.attr(\"xlink:href\", \"#\" + id);\n\t                });\n\t            }\n\t        }\n\t        for (var i = 0, ii = els.length; i < ii; i++) {\n\t            it = els[i];\n\t            urltest(it, \"fill\");\n\t            urltest(it, \"stroke\");\n\t            urltest(it, \"filter\");\n\t            urltest(it, \"mask\");\n\t            urltest(it, \"clip-path\");\n\t            linktest(it);\n\t            var oldid = $(it.node, \"id\");\n\t            if (oldid) {\n\t                $(it.node, {id: it.id});\n\t                ids.push({\n\t                    old: oldid,\n\t                    id: it.id\n\t                });\n\t            }\n\t        }\n\t        for (i = 0, ii = ids.length; i < ii; i++) {\n\t            var fs = uses[ids[i].old];\n\t            if (fs) {\n\t                for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                    fs[j](ids[i].id);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     * Creates a clone of the element and inserts it after the element\n\t     **\n\t     = (Element) the clone\n\t    \\*/\n\t    elproto.clone = function () {\n\t        var clone = wrap(this.node.cloneNode(true));\n\t        if ($(clone.node, \"id\")) {\n\t            $(clone.node, {id: clone.id});\n\t        }\n\t        fixids(clone);\n\t        clone.insertAfter(this);\n\t        return clone;\n\t    };\n\t    /*\\\n\t     * Element.toDefs\n\t     [ method ]\n\t     **\n\t     * Moves element to the shared `<defs>` area\n\t     **\n\t     = (Element) the element\n\t    \\*/\n\t    elproto.toDefs = function () {\n\t        var defs = getSomeDefs(this);\n\t        defs.appendChild(this.node);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toPattern\n\t     [ method ]\n\t     **\n\t     * Creates a `<pattern>` element from the current element\n\t     **\n\t     * To create a pattern you have to specify the pattern rect:\n\t     - x (string|number)\n\t     - y (string|number)\n\t     - width (string|number)\n\t     - height (string|number)\n\t     = (Element) the `<pattern>` element\n\t     * You can use pattern later on as an argument for `fill` attribute:\n\t     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t     |         fill: \"none\",\n\t     |         stroke: \"#bada55\",\n\t     |         strokeWidth: 5\n\t     |     }).pattern(0, 0, 10, 10),\n\t     |     c = paper.circle(200, 200, 100);\n\t     | c.attr({\n\t     |     fill: p\n\t     | });\n\t    \\*/\n\t    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t        var p = make(\"pattern\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            height: height,\n\t            patternUnits: \"userSpaceOnUse\",\n\t            id: p.id,\n\t            viewBox: [x, y, width, height].join(\" \")\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t    /*\\\n\t     * Element.marker\n\t     [ method ]\n\t     **\n\t     * Creates a `<marker>` element from the current element\n\t     **\n\t     * To create a marker you have to specify the bounding rect and reference point:\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - refX (number)\n\t     - refY (number)\n\t     = (Element) the `<marker>` element\n\t     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t    \\*/\n\t    // TODO add usage for markers\n\t    elproto.marker = function (x, y, width, height, refX, refY) {\n\t        var p = make(\"marker\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            refX = x.refX || x.cx;\n\t            refY = x.refY || x.cy;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            viewBox: [x, y, width, height].join(\" \"),\n\t            markerWidth: width,\n\t            markerHeight: height,\n\t            orient: \"auto\",\n\t            refX: refX || 0,\n\t            refY: refY || 0,\n\t            id: p.id\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t    // animation\n\t    function slice(from, to, f) {\n\t        return function (arr) {\n\t            var res = arr.slice(from, to);\n\t            if (res.length == 1) {\n\t                res = res[0];\n\t            }\n\t            return f ? f(res) : res;\n\t        };\n\t    }\n\t    var Animation = function (attr, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        this.attr = attr;\n\t        this.dur = ms;\n\t        easing && (this.easing = easing);\n\t        callback && (this.callback = callback);\n\t    };\n\t    Snap._.Animation = Animation;\n\t    /*\\\n\t     * Snap.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object\n\t     **\n\t     - attr (object) attributes of final destination\n\t     - duration (number) duration of the animation, in milliseconds\n\t     - easing (function) #optional one of easing functions of @mina or custom one\n\t     - callback (function) #optional callback function that fires when animation ends\n\t     = (object) animation object\n\t    \\*/\n\t    Snap.animation = function (attr, ms, easing, callback) {\n\t        return new Animation(attr, ms, easing, callback);\n\t    };\n\t    /*\\\n\t     * Element.inAnim\n\t     [ method ]\n\t     **\n\t     * Returns a set of animations that may be able to manipulate the current element\n\t     **\n\t     = (object) in format:\n\t     o {\n\t     o     anim (object) animation object,\n\t     o     mina (object) @mina object,\n\t     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t    \\*/\n\t    elproto.inAnim = function () {\n\t        var el = this,\n\t            res = [];\n\t        for (var id in el.anims) if (el.anims[has](id)) {\n\t            (function (a) {\n\t                res.push({\n\t                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                    mina: a,\n\t                    curStatus: a.status(),\n\t                    status: function (val) {\n\t                        return a.status(val);\n\t                    },\n\t                    stop: function () {\n\t                        a.stop();\n\t                    }\n\t                });\n\t            }(el.anims[id]));\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.animate\n\t     [ method ]\n\t     **\n\t     * Runs generic animation of one number into another with a caring function\n\t     **\n\t     - from (number|array) number or array of numbers\n\t     - to (number|array) number or array of numbers\n\t     - setter (function) caring function that accepts one number argument\n\t     - duration (number) duration, in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function to execute when animation ends\n\t     = (object) animation object in @mina format\n\t     o {\n\t     o     id (string) animation id, consider it read-only,\n\t     o     duration (function) gets or sets the duration of the animation,\n\t     o     easing (function) easing,\n\t     o     speed (function) gets or sets the speed of the animation,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t     | var rect = Snap().rect(0, 0, 10, 10);\n\t     | Snap.animate(0, 10, function (val) {\n\t     |     rect.attr({\n\t     |         x: val\n\t     |     });\n\t     | }, 1000);\n\t     | // in given context is equivalent to\n\t     | rect.animate({x: 10}, 1000);\n\t    \\*/\n\t    Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops all the animations for the current element\n\t     **\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.stop = function () {\n\t        var anims = this.inAnim();\n\t        for (var i = 0, ii = anims.length; i < ii; i++) {\n\t            anims[i].stop();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Animates the given attributes of the element\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n\t            el = this;\n\t        for (var key in attrs) if (attrs[has](key)) {\n\t            if (el.equal) {\n\t                eq = el.equal(key, Str(attrs[key]));\n\t                from = eq.from;\n\t                to = eq.to;\n\t                f = eq.f;\n\t            } else {\n\t                from = +el.attr(key);\n\t                to = +attrs[key];\n\t            }\n\t            var len = is(from, \"array\") ? from.length : 1;\n\t            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t            fkeys = fkeys.concat(from);\n\t            tkeys = tkeys.concat(to);\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) if (keys[has](key)) {\n\t                    attr[key] = keys[key](val);\n\t                }\n\t                el.attr(attr);\n\t            }, easing);\n\t        el.anims[anim.id] = anim;\n\t        anim._attrs = attrs;\n\t        anim._callback = callback;\n\t        eve(\"snap.animcreated.\" + el.id, anim);\n\t        eve.once(\"mina.finish.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t            callback && callback.call(el);\n\t        });\n\t        eve.once(\"mina.stop.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t        });\n\t        return el;\n\t    };\n\t    var eldata = {};\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key. (Don’t confuse\n\t     * with `data-` attributes)\n\t     *\n\t     * See also @Element.removeData\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0){\n\t            eve(\"snap.data.get.\" + this.id, this, data, null);\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (Snap.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"snap.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.outerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t     *\n\t     * See also @Element.innerSVG\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    /*\\\n\t     * Element.toString\n\t     [ method ]\n\t     **\n\t     * See @Element.outerSVG\n\t    \\*/\n\t    elproto.outerSVG = elproto.toString = toString(1);\n\t    /*\\\n\t     * Element.innerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    elproto.innerSVG = toString();\n\t    function toString(type) {\n\t        return function () {\n\t            var res = type ? \"<\" + this.type : \"\",\n\t                attr = this.node.attributes,\n\t                chld = this.node.childNodes;\n\t            if (type) {\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    res += \" \" + attr[i].name + '=\"' +\n\t                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                }\n\t            }\n\t            if (chld.length) {\n\t                type && (res += \">\");\n\t                for (i = 0, ii = chld.length; i < ii; i++) {\n\t                    if (chld[i].nodeType == 3) {\n\t                        res += chld[i].nodeValue;\n\t                    } else if (chld[i].nodeType == 1) {\n\t                        res += wrap(chld[i]).toString();\n\t                    }\n\t                }\n\t                type && (res += \"</\" + this.type + \">\");\n\t            } else {\n\t                type && (res += \"/>\");\n\t            }\n\t            return res;\n\t        };\n\t    }\n\t    elproto.toDataURL = function () {\n\t        if (window && window.btoa) {\n\t            var bb = this.getBBox(),\n\t                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                x: +bb.x.toFixed(3),\n\t                y: +bb.y.toFixed(3),\n\t                width: +bb.width.toFixed(3),\n\t                height: +bb.height.toFixed(3),\n\t                contents: this.outerSVG()\n\t            });\n\t            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t        }\n\t    };\n\t    /*\\\n\t     * Fragment.select\n\t     [ method ]\n\t     **\n\t     * See @Element.select\n\t    \\*/\n\t    Fragment.prototype.select = elproto.select;\n\t    /*\\\n\t     * Fragment.selectAll\n\t     [ method ]\n\t     **\n\t     * See @Element.selectAll\n\t    \\*/\n\t    Fragment.prototype.selectAll = elproto.selectAll;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var objectToString = Object.prototype.toString,\n\t        Str = String,\n\t        math = Math,\n\t        E = \"\";\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t            this.a = a.a;\n\t            this.b = a.b;\n\t            this.c = a.c;\n\t            this.d = a.d;\n\t            this.e = a.e;\n\t            this.f = a.f;\n\t            return;\n\t        }\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds the given matrix to existing one\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\t\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\t\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns an inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns a copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         - x (number) horizontal offset distance\n\t         - y (number) vertical offset distance\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            return this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         - x (number) amount to be scaled, with `1` resulting in no change\n\t         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t         - cx (number) #optional horizontal origin point from which to scale\n\t         - cy (number) #optional vertical origin point from which to scale\n\t         * Default cx, cy is the middle point of the element.\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         - a (number) angle of rotation, in degrees\n\t         - x (number) horizontal origin point from which to rotate\n\t         - y (number) vertical origin point from which to rotate\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = Snap.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            return this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.determinant\n\t         [ method ]\n\t         **\n\t         * Finds determinant of the given matrix.\n\t         = (number) determinant\n\t        \\*/\n\t        matrixproto.determinant = function () {\n\t            return this.a * this.d - this.b * this.c;\n\t        };\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\t\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\t\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\t\n\t            if (this.determinant() < 0) {\n\t                out.scalex = -out.scalex;\n\t            }\n\t\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = Snap.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = Snap.deg(math.asin(sin));\n\t            }\n\t\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Returns transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this.split();\n\t            if (!+s.shear.toFixed(9)) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\t    /*\\\n\t     * Snap.Matrix\n\t     [ method ]\n\t     **\n\t     * Matrix constructor, extend on your own risk.\n\t     * To create matrices use @Snap.matrix.\n\t    \\*/\n\t    Snap.Matrix = Matrix;\n\t    /*\\\n\t     * Snap.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns a matrix based on the given parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     * or\n\t     - svgMatrix (SVGMatrix)\n\t     = (object) @Matrix\n\t    \\*/\n\t    Snap.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var has = \"hasOwnProperty\",\n\t        make = Snap._.make,\n\t        wrap = Snap._.wrap,\n\t        is = Snap.is,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t        $ = Snap._.$,\n\t        URL = Snap.url,\n\t        Str = String,\n\t        separator = Snap._.separator,\n\t        E = \"\";\n\t    // Attributes event handlers\n\t    eve.on(\"snap.util.attr.mask\", function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value.type == \"mask\") {\n\t                var mask = value;\n\t            } else {\n\t                mask = make(\"mask\", getSomeDefs(this));\n\t                mask.node.appendChild(value.node);\n\t            }\n\t            !mask.node.id && $(mask.node, {\n\t                id: mask.id\n\t            });\n\t            $(this.node, {\n\t                mask: URL(mask.id)\n\t            });\n\t        }\n\t    });\n\t    (function (clipIt) {\n\t        eve.on(\"snap.util.attr.clip\", clipIt);\n\t        eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t        eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t    }(function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value.type == \"clipPath\") {\n\t                var clip = value;\n\t            } else {\n\t                clip = make(\"clipPath\", getSomeDefs(this));\n\t                clip.node.appendChild(value.node);\n\t                !clip.node.id && $(clip.node, {\n\t                    id: clip.id\n\t                });\n\t            }\n\t            $(this.node, {\n\t                \"clip-path\": URL(clip.node.id || clip.id)\n\t            });\n\t        }\n\t    }));\n\t    function fillStroke(name) {\n\t        return function (value) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n\t                (value.node.firstChild.tagName == \"radialGradient\" ||\n\t                value.node.firstChild.tagName == \"linearGradient\" ||\n\t                value.node.firstChild.tagName == \"pattern\")) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value instanceof Element) {\n\t                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n\t                   || value.type == \"pattern\") {\n\t                    if (!value.node.id) {\n\t                        $(value.node, {\n\t                            id: value.id\n\t                        });\n\t                    }\n\t                    var fill = URL(value.node.id);\n\t                } else {\n\t                    fill = value.attr(name);\n\t                }\n\t            } else {\n\t                fill = Snap.color(value);\n\t                if (fill.error) {\n\t                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                    if (grad) {\n\t                        if (!grad.node.id) {\n\t                            $(grad.node, {\n\t                                id: grad.id\n\t                            });\n\t                        }\n\t                        fill = URL(grad.node.id);\n\t                    } else {\n\t                        fill = value;\n\t                    }\n\t                } else {\n\t                    fill = Str(fill);\n\t                }\n\t            }\n\t            var attrs = {};\n\t            attrs[name] = fill;\n\t            $(this.node, attrs);\n\t            this.node.style[name] = E;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t        string = Str(string);\n\t        var tokens = string.match(gradrg);\n\t        if (!tokens) {\n\t            return null;\n\t        }\n\t        var type = tokens[1],\n\t            params = tokens[2],\n\t            stops = tokens[3];\n\t        params = params.split(/\\s*,\\s*/).map(function (el) {\n\t            return +el == el ? +el : el;\n\t        });\n\t        if (params.length == 1 && params[0] == 0) {\n\t            params = [];\n\t        }\n\t        stops = stops.split(\"-\");\n\t        stops = stops.map(function (el) {\n\t            el = el.split(\":\");\n\t            var out = {\n\t                color: el[0]\n\t            };\n\t            if (el[1]) {\n\t                out.offset = parseFloat(el[1]);\n\t            }\n\t            return out;\n\t        });\n\t        return {\n\t            type: type,\n\t            params: params,\n\t            stops: stops\n\t        };\n\t    });\n\t\n\t    eve.on(\"snap.util.attr.d\", function (value) {\n\t        eve.stop();\n\t        if (is(value, \"array\") && is(value[0], \"array\")) {\n\t            value = Snap.path.toString.call(value);\n\t        }\n\t        value = Str(value);\n\t        if (value.match(/[ruo]/i)) {\n\t            value = Snap.path.toAbsolute(value);\n\t        }\n\t        $(this.node, {d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.#text\", function (value) {\n\t        eve.stop();\n\t        value = Str(value);\n\t        var txt = glob.doc.createTextNode(value);\n\t        while (this.node.firstChild) {\n\t            this.node.removeChild(this.node.firstChild);\n\t        }\n\t        this.node.appendChild(txt);\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.path\", function (value) {\n\t        eve.stop();\n\t        this.attr({d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.class\", function (value) {\n\t        eve.stop();\n\t        this.node.className.baseVal = value;\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t        var vb;\n\t        if (is(value, \"object\") && \"x\" in value) {\n\t            vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t        } else if (is(value, \"array\")) {\n\t            vb = value.join(\" \");\n\t        } else {\n\t            vb = value;\n\t        }\n\t        $(this.node, {\n\t            viewBox: vb\n\t        });\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.transform\", function (value) {\n\t        this.transform(value);\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.r\", function (value) {\n\t        if (this.type == \"rect\") {\n\t            eve.stop();\n\t            $(this.node, {\n\t                rx: value,\n\t                ry: value\n\t            });\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.textpath\", function (value) {\n\t        eve.stop();\n\t        if (this.type == \"text\") {\n\t            var id, tp, node;\n\t            if (!value && this.textPath) {\n\t                tp = this.textPath;\n\t                while (tp.node.firstChild) {\n\t                    this.node.appendChild(tp.node.firstChild);\n\t                }\n\t                tp.remove();\n\t                delete this.textPath;\n\t                return;\n\t            }\n\t            if (is(value, \"string\")) {\n\t                var defs = getSomeDefs(this),\n\t                    path = wrap(defs.parentNode).path(value);\n\t                defs.appendChild(path.node);\n\t                id = path.id;\n\t                path.attr({id: id});\n\t            } else {\n\t                value = wrap(value);\n\t                if (value instanceof Element) {\n\t                    id = value.attr(\"id\");\n\t                    if (!id) {\n\t                        id = value.id;\n\t                        value.attr({id: id});\n\t                    }\n\t                }\n\t            }\n\t            if (id) {\n\t                tp = this.textPath;\n\t                node = this.node;\n\t                if (tp) {\n\t                    tp.attr({\"xlink:href\": \"#\" + id});\n\t                } else {\n\t                    tp = $(\"textPath\", {\n\t                        \"xlink:href\": \"#\" + id\n\t                    });\n\t                    while (node.firstChild) {\n\t                        tp.appendChild(node.firstChild);\n\t                    }\n\t                    node.appendChild(tp);\n\t                    this.textPath = wrap(tp);\n\t                }\n\t            }\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.text\", function (value) {\n\t        if (this.type == \"text\") {\n\t            var i = 0,\n\t                node = this.node,\n\t                tuner = function (chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var tuned = tuner(value);\n\t            while (tuned.firstChild) {\n\t                node.appendChild(tuned.firstChild);\n\t            }\n\t        }\n\t        eve.stop();\n\t    })(-1);\n\t    function setFontSize(value) {\n\t        eve.stop();\n\t        if (value == +value) {\n\t            value += \"px\";\n\t        }\n\t        this.node.style.fontSize = value;\n\t    }\n\t    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t\n\t    eve.on(\"snap.util.getattr.transform\", function () {\n\t        eve.stop();\n\t        return this.transform();\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.textpath\", function () {\n\t        eve.stop();\n\t        return this.textPath;\n\t    })(-1);\n\t    // Markers\n\t    (function () {\n\t        function getter(end) {\n\t            return function () {\n\t                eve.stop();\n\t                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                if (style == \"none\") {\n\t                    return style;\n\t                } else {\n\t                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                }\n\t            };\n\t        }\n\t        function setter(end) {\n\t            return function (value) {\n\t                eve.stop();\n\t                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                if (value == \"\" || !value) {\n\t                    this.node.style[name] = \"none\";\n\t                    return;\n\t                }\n\t                if (value.type == \"marker\") {\n\t                    var id = value.node.id;\n\t                    if (!id) {\n\t                        $(value.node, {id: value.id});\n\t                    }\n\t                    this.node.style[name] = URL(id);\n\t                    return;\n\t                }\n\t            };\n\t        }\n\t        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t    }());\n\t    eve.on(\"snap.util.getattr.r\", function () {\n\t        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t            eve.stop();\n\t            return $(this.node, \"rx\");\n\t        }\n\t    })(-1);\n\t    function textExtract(node) {\n\t        var out = [];\n\t        var children = node.childNodes;\n\t        for (var i = 0, ii = children.length; i < ii; i++) {\n\t            var chi = children[i];\n\t            if (chi.nodeType == 3) {\n\t                out.push(chi.nodeValue);\n\t            }\n\t            if (chi.tagName == \"tspan\") {\n\t                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                    out.push(chi.firstChild.nodeValue);\n\t                } else {\n\t                    out.push(textExtract(chi));\n\t                }\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    eve.on(\"snap.util.getattr.text\", function () {\n\t        if (this.type == \"text\" || this.type == \"tspan\") {\n\t            eve.stop();\n\t            var out = textExtract(this.node);\n\t            return out.length == 1 ? out[0] : out;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.#text\", function () {\n\t        return this.node.textContent;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.viewBox\", function () {\n\t        eve.stop();\n\t        var vb = $(this.node, \"viewBox\");\n\t        if (vb) {\n\t            vb = vb.split(separator);\n\t            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.points\", function () {\n\t        var p = $(this.node, \"points\");\n\t        eve.stop();\n\t        if (p) {\n\t            return p.split(separator);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.path\", function () {\n\t        var p = $(this.node, \"d\");\n\t        eve.stop();\n\t        return p;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.class\", function () {\n\t        return this.node.className.baseVal;\n\t    })(-1);\n\t    function getFontSize() {\n\t        eve.stop();\n\t        return this.node.style.fontSize;\n\t    }\n\t    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var rgNotSpace = /\\S+/g,\n\t        rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t        rgTrim = /(^\\s+|\\s+$)/g,\n\t        Str = String,\n\t        elproto = Element.prototype;\n\t    /*\\\n\t     * Element.addClass\n\t     [ method ]\n\t     **\n\t     * Adds given class name or list of class names to the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.addClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t\n\t        if (classes.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (!~pos) {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeClass\n\t     [ method ]\n\t     **\n\t     * Removes given class name or list of class names from the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.removeClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        if (curClasses.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hasClass\n\t     [ method ]\n\t     **\n\t     * Checks if the element has a given class name in the list of class names applied to it.\n\t     - value (string) class name\n\t     **\n\t     = (boolean) `true` if the element has given class\n\t    \\*/\n\t    elproto.hasClass = function (value) {\n\t        var elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [];\n\t        return !!~curClasses.indexOf(value);\n\t    };\n\t    /*\\\n\t     * Element.toggleClass\n\t     [ method ]\n\t     **\n\t     * Add or remove one or more classes from the element, depending on either\n\t     * the class’s presence or the value of the `flag` argument.\n\t     - value (string) class name or space separated list of class names\n\t     - flag (boolean) value to determine whether the class should be added or removed\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.toggleClass = function (value, flag) {\n\t        if (flag != null) {\n\t            if (flag) {\n\t                return this.addClass(value);\n\t            } else {\n\t                return this.removeClass(value);\n\t            }\n\t        }\n\t        var classes = (value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        j = 0;\n\t        while ((clazz = classes[j++])) {\n\t            pos = curClasses.indexOf(clazz);\n\t            if (~pos) {\n\t                curClasses.splice(pos, 1);\n\t            } else {\n\t                curClasses.push(clazz);\n\t            }\n\t        }\n\t\n\t        finalValue = curClasses.join(\" \");\n\t        if (className != finalValue) {\n\t            elem.className.baseVal = finalValue;\n\t        }\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var operators = {\n\t            \"+\": function (x, y) {\n\t                    return x + y;\n\t                },\n\t            \"-\": function (x, y) {\n\t                    return x - y;\n\t                },\n\t            \"/\": function (x, y) {\n\t                    return x / y;\n\t                },\n\t            \"*\": function (x, y) {\n\t                    return x * y;\n\t                }\n\t        },\n\t        Str = String,\n\t        reUnit = /[a-z]+$/i,\n\t        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr\", function (val) {\n\t        var plus = Str(val).match(reAddon);\n\t        if (plus) {\n\t            var evnt = eve.nt(),\n\t                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                a = this.attr(name),\n\t                atr = {};\n\t            eve.stop();\n\t            var unit = plus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[plus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                val = op(parseFloat(a), +plus[2]);\n\t            } else {\n\t                a = this.asPX(name);\n\t                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t            }\n\t            if (isNaN(a) || isNaN(val)) {\n\t                return;\n\t            }\n\t            atr[name] = val;\n\t            this.attr(atr);\n\t        }\n\t    })(-10);\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this,\n\t            bplus = Str(b).match(reAddon);\n\t        if (bplus) {\n\t            eve.stop();\n\t            var unit = bplus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[bplus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: op(parseFloat(a), +bplus[2]),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                a = this.asPX(name);\n\t                return {\n\t                    from: a,\n\t                    to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        }\n\t    })(-10);\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var proto = Paper.prototype,\n\t        is = Snap.is;\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t     = (object) the `rect` element\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    proto.rect = function (x, y, w, h, rx, ry) {\n\t        var attr;\n\t        if (ry == null) {\n\t            ry = rx;\n\t        }\n\t        if (is(x, \"object\") && x == \"[object Object]\") {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                width: w,\n\t                height: h\n\t            };\n\t            if (rx != null) {\n\t                attr.rx = rx;\n\t                attr.ry = ry;\n\t            }\n\t        }\n\t        return this.el(\"rect\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) the `circle` element\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    proto.circle = function (cx, cy, r) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr = {\n\t                cx: cx,\n\t                cy: cy,\n\t                r: r\n\t            };\n\t        }\n\t        return this.el(\"circle\", attr);\n\t    };\n\t\n\t    var preload = (function () {\n\t        function onerror() {\n\t            this.parentNode.removeChild(this);\n\t        }\n\t        return function (src, f) {\n\t            var img = glob.doc.createElement(\"img\"),\n\t                body = glob.doc.body;\n\t            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t            img.onload = function () {\n\t                f.call(img);\n\t                img.onload = img.onerror = null;\n\t                body.removeChild(img);\n\t            };\n\t            img.onerror = onerror;\n\t            body.appendChild(img);\n\t            img.src = src;\n\t        };\n\t    }());\n\t\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Places an image on the surface\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x offset position\n\t     - y (number) y offset position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) the `image` element\n\t     * or\n\t     = (object) Snap element object with type `image`\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    proto.image = function (src, x, y, width, height) {\n\t        var el = this.el(\"image\");\n\t        if (is(src, \"object\") && \"src\" in src) {\n\t            el.attr(src);\n\t        } else if (src != null) {\n\t            var set = {\n\t                \"xlink:href\": src,\n\t                preserveAspectRatio: \"none\"\n\t            };\n\t            if (x != null && y != null) {\n\t                set.x = x;\n\t                set.y = y;\n\t            }\n\t            if (width != null && height != null) {\n\t                set.width = width;\n\t                set.height = height;\n\t            } else {\n\t                preload(src, function () {\n\t                    Snap._.$(el.node, {\n\t                        width: this.offsetWidth,\n\t                        height: this.offsetHeight\n\t                    });\n\t                });\n\t            }\n\t            Snap._.$(el.node, set);\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) the `ellipse` element\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    proto.ellipse = function (cx, cy, rx, ry) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr ={\n\t                cx: cx,\n\t                cy: cy,\n\t                rx: rx,\n\t                ry: ry\n\t            };\n\t        }\n\t        return this.el(\"ellipse\", attr);\n\t    };\n\t    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a `<path>` element using the given string as the path's definition\n\t     - pathString (string) #optional path string in SVG format\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t     | \"M10,20L30,40\"\n\t     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t    \\*/\n\t    proto.path = function (d) {\n\t        var attr;\n\t        if (is(d, \"object\") && !is(d, \"array\")) {\n\t            attr = d;\n\t        } else if (d) {\n\t            attr = {d: d};\n\t        }\n\t        return this.el(\"path\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.g\n\t     [ method ]\n\t     **\n\t     * Creates a group element\n\t     **\n\t     - varargs (…) #optional elements to nest within the group\n\t     = (object) the `g` element\n\t     **\n\t     > Usage\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g(c2, c1); // note that the order of elements is different\n\t     * or\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g();\n\t     | g.add(c2, c1);\n\t    \\*/\n\t    /*\\\n\t     * Paper.group\n\t     [ method ]\n\t     **\n\t     * See @Paper.g\n\t    \\*/\n\t    proto.group = proto.g = function (first) {\n\t        var attr,\n\t            el = this.el(\"g\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.svg\n\t     [ method ]\n\t     **\n\t     * Creates a nested SVG element.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `svg` element\n\t     **\n\t    \\*/\n\t    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t        var attrs = {};\n\t        if (is(x, \"object\") && y == null) {\n\t            attrs = x;\n\t        } else {\n\t            if (x != null) {\n\t                attrs.x = x;\n\t            }\n\t            if (y != null) {\n\t                attrs.y = y;\n\t            }\n\t            if (width != null) {\n\t                attrs.width = width;\n\t            }\n\t            if (height != null) {\n\t                attrs.height = height;\n\t            }\n\t            if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                attrs.viewBox = [vbx, vby, vbw, vbh];\n\t            }\n\t        }\n\t        return this.el(\"svg\", attrs);\n\t    };\n\t    /*\\\n\t     * Paper.mask\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t     **\n\t     = (object) the `mask` element\n\t     **\n\t    \\*/\n\t    proto.mask = function (first) {\n\t        var attr,\n\t            el = this.el(\"mask\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ptrn\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `pattern` element\n\t     **\n\t    \\*/\n\t    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t        if (is(x, \"object\")) {\n\t            var attr = x;\n\t        } else {\n\t            attr = {patternUnits: \"userSpaceOnUse\"};\n\t            if (x) {\n\t                attr.x = x;\n\t            }\n\t            if (y) {\n\t                attr.y = y;\n\t            }\n\t            if (width != null) {\n\t                attr.width = width;\n\t            }\n\t            if (height != null) {\n\t                attr.height = height;\n\t            }\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            } else {\n\t                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t            }\n\t        }\n\t        return this.el(\"pattern\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.use\n\t     [ method ]\n\t     **\n\t     * Creates a <use> element.\n\t     - id (string) @optional id of element to link\n\t     * or\n\t     - id (Element) @optional element to link\n\t     **\n\t     = (object) the `use` element\n\t     **\n\t    \\*/\n\t    proto.use = function (id) {\n\t        if (id != null) {\n\t            if (id instanceof Element) {\n\t                if (!id.attr(\"id\")) {\n\t                    id.attr({id: Snap._.id(id)});\n\t                }\n\t                id = id.attr(\"id\");\n\t            }\n\t            if (String(id).charAt() == \"#\") {\n\t                id = id.substring(1);\n\t            }\n\t            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n\t        } else {\n\t            return Element.prototype.use.call(this);\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.symbol\n\t     [ method ]\n\t     **\n\t     * Creates a <symbol> element.\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     = (object) the `symbol` element\n\t     **\n\t    \\*/\n\t    proto.symbol = function (vx, vy, vw, vh) {\n\t        var attr = {};\n\t        if (vx != null && vy != null && vw != null && vh != null) {\n\t            attr.viewBox = [vx, vy, vw, vh];\n\t        }\n\t\n\t        return this.el(\"symbol\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t     = (object) the `text` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.text(50, 50, \"Snap\");\n\t     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t     | // Text path usage\n\t     | t1.attr({textpath: \"M10,10L100,100\"});\n\t     | // or\n\t     | var pth = paper.path(\"M10,10L100,100\");\n\t     | t1.attr({textpath: pth});\n\t    \\*/\n\t    proto.text = function (x, y, text) {\n\t        var attr = {};\n\t        if (is(x, \"object\")) {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                text: text || \"\"\n\t            };\n\t        }\n\t        return this.el(\"text\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.line\n\t     [ method ]\n\t     **\n\t     * Draws a line\n\t     **\n\t     - x1 (number) x coordinate position of the start\n\t     - y1 (number) y coordinate position of the start\n\t     - x2 (number) x coordinate position of the end\n\t     - y2 (number) y coordinate position of the end\n\t     = (object) the `line` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.line(50, 50, 100, 100);\n\t    \\*/\n\t    proto.line = function (x1, y1, x2, y2) {\n\t        var attr = {};\n\t        if (is(x1, \"object\")) {\n\t            attr = x1;\n\t        } else if (x1 != null) {\n\t            attr = {\n\t                x1: x1,\n\t                x2: x2,\n\t                y1: y1,\n\t                y2: y2\n\t            };\n\t        }\n\t        return this.el(\"line\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polyline\n\t     [ method ]\n\t     **\n\t     * Draws a polyline\n\t     **\n\t     - points (array) array of points\n\t     * or\n\t     - varargs (…) points\n\t     = (object) the `polyline` element\n\t     **\n\t     > Usage\n\t     | var p1 = paper.polyline([10, 10, 100, 100]);\n\t     | var p2 = paper.polyline(10, 10, 100, 100);\n\t    \\*/\n\t    proto.polyline = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polyline\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polygon\n\t     [ method ]\n\t     **\n\t     * Draws a polygon. See @Paper.polyline\n\t    \\*/\n\t    proto.polygon = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polygon\", attr);\n\t    };\n\t    // gradients\n\t    (function () {\n\t        var $ = Snap._.$;\n\t        // gradients' helpers\n\t        function Gstops() {\n\t            return this.selectAll(\"stop\");\n\t        }\n\t        function GaddStop(color, offset) {\n\t            var stop = $(\"stop\"),\n\t                attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t            color = Snap.color(color);\n\t            attr[\"stop-color\"] = color.hex;\n\t            if (color.opacity < 1) {\n\t                attr[\"stop-opacity\"] = color.opacity;\n\t            }\n\t            $(stop, attr);\n\t            this.node.appendChild(stop);\n\t            return this;\n\t        }\n\t        function GgetBBox() {\n\t            if (this.type == \"linearGradient\") {\n\t                var x1 = $(this.node, \"x1\") || 0,\n\t                    x2 = $(this.node, \"x2\") || 1,\n\t                    y1 = $(this.node, \"y1\") || 0,\n\t                    y2 = $(this.node, \"y2\") || 0;\n\t                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t            } else {\n\t                var cx = this.node.cx || .5,\n\t                    cy = this.node.cy || .5,\n\t                    r = this.node.r || 0;\n\t                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t            }\n\t        }\n\t        function gradient(defs, str) {\n\t            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                el;\n\t            if (!grad) {\n\t                return null;\n\t            }\n\t            grad.params.unshift(defs);\n\t            if (grad.type.toLowerCase() == \"l\") {\n\t                el = gradientLinear.apply(0, grad.params);\n\t            } else {\n\t                el = gradientRadial.apply(0, grad.params);\n\t            }\n\t            if (grad.type != grad.type.toLowerCase()) {\n\t                $(el.node, {\n\t                    gradientUnits: \"userSpaceOnUse\"\n\t                });\n\t            }\n\t            var stops = grad.stops,\n\t                len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n\t                seed(i, stops[i].offset);\n\t            }\n\t            stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            for (i = 0; i <= len; i++) {\n\t                var stop = stops[i];\n\t                el.addStop(stop.color, stop.offset);\n\t            }\n\t            return el;\n\t        }\n\t        function gradientLinear(defs, x1, y1, x2, y2) {\n\t            var el = Snap._.make(\"linearGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (x1 != null) {\n\t                $(el.node, {\n\t                    x1: x1,\n\t                    y1: y1,\n\t                    x2: x2,\n\t                    y2: y2\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t            var el = Snap._.make(\"radialGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (cx != null) {\n\t                $(el.node, {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                });\n\t            }\n\t            if (fx != null && fy != null) {\n\t                $(el.node, {\n\t                    fx: fx,\n\t                    fy: fy\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        /*\\\n\t         * Paper.gradient\n\t         [ method ]\n\t         **\n\t         * Creates a gradient element\n\t         **\n\t         - gradient (string) gradient descriptor\n\t         > Gradient Descriptor\n\t         * The gradient descriptor is an expression formatted as\n\t         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t         * either linear or radial.  The uppercase `L` or `R` letters\n\t         * indicate absolute coordinates offset from the SVG surface.\n\t         * Lowercase `l` or `r` letters indicate coordinates\n\t         * calculated relative to the element to which the gradient is\n\t         * applied.  Coordinates specify a linear gradient vector as\n\t         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t         * `r` and optional `fx`, `fy` specifying a focal point away\n\t         * from the center of the circle. Specify `<colors>` as a list\n\t         * of dash-separated CSS color values.  Each color may be\n\t         * followed by a custom offset value, separated with a colon\n\t         * character.\n\t         > Examples\n\t         * Linear gradient, relative from top-left corner to bottom-right\n\t         * corner, from black through red to white:\n\t         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t         * through red at 25% to white:\n\t         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t         * Radial gradient, relative from the center of the element with radius\n\t         * half the width, from black to white:\n\t         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t         * To apply the gradient:\n\t         | paper.circle(50, 50, 40).attr({\n\t         |     fill: g\n\t         | });\n\t         = (object) the `gradient` element\n\t        \\*/\n\t        proto.gradient = function (str) {\n\t            return gradient(this.defs, str);\n\t        };\n\t        proto.gradientLinear = function (x1, y1, x2, y2) {\n\t            return gradientLinear(this.defs, x1, y1, x2, y2);\n\t        };\n\t        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t        };\n\t        /*\\\n\t         * Paper.toString\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper\n\t         = (string) SVG code for the @Paper\n\t        \\*/\n\t        proto.toString = function () {\n\t            var doc = this.node.ownerDocument,\n\t                f = doc.createDocumentFragment(),\n\t                d = doc.createElement(\"div\"),\n\t                svg = this.node.cloneNode(true),\n\t                res;\n\t            f.appendChild(d);\n\t            d.appendChild(svg);\n\t            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n\t            res = d.innerHTML;\n\t            f.removeChild(f.firstChild);\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Paper.toDataURL\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper as Data URI string.\n\t         = (string) Data URI string\n\t        \\*/\n\t        proto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.clear\n\t         [ method ]\n\t         **\n\t         * Removes all child nodes of the paper, except <defs>.\n\t        \\*/\n\t        proto.clear = function () {\n\t            var node = this.node.firstChild,\n\t                next;\n\t            while (node) {\n\t                next = node.nextSibling;\n\t                if (node.tagName != \"defs\") {\n\t                    node.parentNode.removeChild(node);\n\t                } else {\n\t                    proto.clear.call({node: node});\n\t                }\n\t                node = next;\n\t            }\n\t        };\n\t    }());\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        clone = Snap._.clone,\n\t        has = \"hasOwnProperty\",\n\t        p2s = /,?([a-z]),?/gi,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        PI = math.PI,\n\t        mmin = math.min,\n\t        mmax = math.max,\n\t        pow = math.pow,\n\t        abs = math.abs;\n\t    function paths(ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    }\n\t    function box(x, y, width, height) {\n\t        if (x == null) {\n\t            x = y = width = height = 0;\n\t        }\n\t        if (y == null) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            w: width,\n\t            height: height,\n\t            h: height,\n\t            x2: x + width,\n\t            y2: y + height,\n\t            cx: x + width / 2,\n\t            cy: y + height / 2,\n\t            r1: math.min(width, height) / 2,\n\t            r2: math.max(width, height) / 2,\n\t            r0: math.sqrt(width * width + height * height) / 2,\n\t            path: rectPath(x, y, width, height),\n\t            vb: [x, y, width, height].join(\" \")\n\t        };\n\t    }\n\t    function toString() {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    }\n\t    function pathClone(pathArray) {\n\t        var res = clone(pathArray);\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n\t                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    }\n\t    function getLengthFactory(istotal, subpath) {\n\t        function O(val) {\n\t            return +(+val).toFixed(3);\n\t        }\n\t        return Snap._.cacher(function (path, length, onlystart) {\n\t            if (path instanceof Element) {\n\t                path = path.attr(\"d\");\n\t            }\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\n\t                                \"C\" + O(point.start.x),\n\t                                O(point.start.y),\n\t                                O(point.m.x),\n\t                                O(point.m.y),\n\t                                O(point.x),\n\t                                O(point.y)\n\t                            ];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\n\t                                \"M\" + O(point.x),\n\t                                O(point.y) + \"C\" + O(point.n.x),\n\t                                O(point.n.y),\n\t                                O(point.end.x),\n\t                                O(point.end.y),\n\t                                O(p[5]),\n\t                                O(p[6])\n\t                            ].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return point;\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            return point;\n\t        }, null, Snap._.clone);\n\t    }\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        // (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    }\n\t    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!Snap.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return box(\n\t            bbox.min.x,\n\t            bbox.min.y,\n\t            bbox.max.x - bbox.min.x,\n\t            bbox.max.y - bbox.min.y\n\t        );\n\t    }\n\t    function isPointInsideBBox(bbox, x, y) {\n\t        return  x >= bbox.x &&\n\t                x <= bbox.x + bbox.width &&\n\t                y >= bbox.y &&\n\t                y <= bbox.y + bbox.height;\n\t    }\n\t    function isBBoxIntersect(bbox1, bbox2) {\n\t        bbox1 = box(bbox1);\n\t        bbox2 = box(bbox2);\n\t        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n\t                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n\t                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    }\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = bezierBBox(bez1),\n\t            bbox2 = bezierBBox(bez2);\n\t        if (!isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = ~~(l1 / 8),\n\t            n2 = ~~(l2 / 8),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: t1,\n\t                                t2: t2\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function pathIntersection(path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    }\n\t    function pathIntersectionNumber(path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    }\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = path2curve(path1);\n\t        path2 = path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function isPointInsidePath(path, x, y) {\n\t        var bbox = pathBBox(path);\n\t        return isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    }\n\t    function pathBBox(path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return box();\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0, \n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X.concat(dim.min.x, dim.max.x);\n\t                Y = Y.concat(dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin.apply(0, X),\n\t            ymin = mmin.apply(0, Y),\n\t            xmax = mmax.apply(0, X),\n\t            ymax = mmax.apply(0, Y),\n\t            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    }\n\t    function rectPath(x, y, w, h, r) {\n\t        if (r) {\n\t            return [\n\t                [\"M\", +x + (+r), y],\n\t                [\"l\", w - r * 2, 0],\n\t                [\"a\", r, r, 0, 0, 1, r, r],\n\t                [\"l\", 0, h - r * 2],\n\t                [\"a\", r, r, 0, 0, 1, -r, r],\n\t                [\"l\", r * 2 - w, 0],\n\t                [\"a\", r, r, 0, 0, 1, -r, -r],\n\t                [\"l\", 0, r * 2 - h],\n\t                [\"a\", r, r, 0, 0, 1, r, -r],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function ellipsePath(x, y, rx, ry, a) {\n\t        if (a == null && ry == null) {\n\t            ry = rx;\n\t        }\n\t        x = +x;\n\t        y = +y;\n\t        rx = +rx;\n\t        ry = +ry;\n\t        if (a != null) {\n\t            var rad = Math.PI / 180,\n\t                x1 = x + rx * Math.cos(-ry * rad),\n\t                x2 = x + rx * Math.cos(-a * rad),\n\t                y1 = y + rx * Math.sin(-ry * rad),\n\t                y2 = y + rx * Math.sin(-a * rad),\n\t                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t        } else {\n\t            res = [\n\t                [\"M\", x, y],\n\t                [\"m\", 0, -ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    var unit2px = Snap._unit2px,\n\t        getPath = {\n\t        path: function (el) {\n\t            return el.attr(\"path\");\n\t        },\n\t        circle: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx, attr.cy, attr.r);\n\t        },\n\t        ellipse: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t        },\n\t        rect: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t        },\n\t        image: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t        },\n\t        line: function (el) {\n\t            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t        },\n\t        polyline: function (el) {\n\t            return \"M\" + el.attr(\"points\");\n\t        },\n\t        polygon: function (el) {\n\t            return \"M\" + el.attr(\"points\") + \"z\";\n\t        },\n\t        deflt: function (el) {\n\t            var bbox = el.node.getBBox();\n\t            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t        }\n\t    };\n\t    function pathToRelative(pathArray) {\n\t        var pth = paths(pathArray),\n\t            lowerCase = String.prototype.toLowerCase;\n\t        if (pth.rel) {\n\t            return pathClone(pth.rel);\n\t        }\n\t        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = pathArray[0][1];\n\t            y = pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res.push([\"M\", x, y]);\n\t        }\n\t        for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t            var r = res[i] = [],\n\t                pa = pathArray[i];\n\t            if (pa[0] != lowerCase.call(pa[0])) {\n\t                r[0] = lowerCase.call(pa[0]);\n\t                switch (r[0]) {\n\t                    case \"a\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +(pa[6] - x).toFixed(3);\n\t                        r[7] = +(pa[7] - y).toFixed(3);\n\t                        break;\n\t                    case \"v\":\n\t                        r[1] = +(pa[1] - y).toFixed(3);\n\t                        break;\n\t                    case \"m\":\n\t                        mx = pa[1];\n\t                        my = pa[2];\n\t                    default:\n\t                        for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                        }\n\t                }\n\t            } else {\n\t                r = res[i] = [];\n\t                if (pa[0] == \"m\") {\n\t                    mx = pa[1] + x;\n\t                    my = pa[2] + y;\n\t                }\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    res[i][k] = pa[k];\n\t                }\n\t            }\n\t            var len = res[i].length;\n\t            switch (res[i][0]) {\n\t                case \"z\":\n\t                    x = mx;\n\t                    y = my;\n\t                    break;\n\t                case \"h\":\n\t                    x += +res[i][len - 1];\n\t                    break;\n\t                case \"v\":\n\t                    y += +res[i][len - 1];\n\t                    break;\n\t                default:\n\t                    x += +res[i][len - 2];\n\t                    y += +res[i][len - 1];\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.rel = pathClone(res);\n\t        return res;\n\t    }\n\t    function pathToAbsolute(pathArray) {\n\t        var pth = paths(pathArray);\n\t        if (pth.abs) {\n\t            return pathClone(pth.abs);\n\t        }\n\t        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        if (!pathArray || !pathArray.length) {\n\t            return [[\"M\", 0, 0]];\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0,\n\t            pa0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = +pathArray[0][1];\n\t            y = +pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res[0] = [\"M\", x, y];\n\t        }\n\t        var crz = pathArray.length == 3 &&\n\t            pathArray[0][0] == \"M\" &&\n\t            pathArray[1][0].toUpperCase() == \"R\" &&\n\t            pathArray[2][0].toUpperCase() == \"Z\";\n\t        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t            res.push(r = []);\n\t            pa = pathArray[i];\n\t            pa0 = pa[0];\n\t            if (pa0 != pa0.toUpperCase()) {\n\t                r[0] = pa0.toUpperCase();\n\t                switch (r[0]) {\n\t                    case \"A\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +pa[6] + x;\n\t                        r[7] = +pa[7] + y;\n\t                        break;\n\t                    case \"V\":\n\t                        r[1] = +pa[1] + y;\n\t                        break;\n\t                    case \"H\":\n\t                        r[1] = +pa[1] + x;\n\t                        break;\n\t                    case \"R\":\n\t                        var dots = [x, y].concat(pa.slice(1));\n\t                        for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                            dots[j] = +dots[j] + x;\n\t                            dots[++j] = +dots[j] + y;\n\t                        }\n\t                        res.pop();\n\t                        res = res.concat(catmullRom2bezier(dots, crz));\n\t                        break;\n\t                    case \"O\":\n\t                        res.pop();\n\t                        dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                        dots.push(dots[0]);\n\t                        res = res.concat(dots);\n\t                        break;\n\t                    case \"U\":\n\t                        res.pop();\n\t                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                        break;\n\t                    case \"M\":\n\t                        mx = +pa[1] + x;\n\t                        my = +pa[2] + y;\n\t                    default:\n\t                        for (j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                        }\n\t                }\n\t            } else if (pa0 == \"R\") {\n\t                dots = [x, y].concat(pa.slice(1));\n\t                res.pop();\n\t                res = res.concat(catmullRom2bezier(dots, crz));\n\t                r = [\"R\"].concat(pa.slice(-2));\n\t            } else if (pa0 == \"O\") {\n\t                res.pop();\n\t                dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                dots.push(dots[0]);\n\t                res = res.concat(dots);\n\t            } else if (pa0 == \"U\") {\n\t                res.pop();\n\t                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t            } else {\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    r[k] = pa[k];\n\t                }\n\t            }\n\t            pa0 = pa0.toUpperCase();\n\t            if (pa0 != \"O\") {\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = +mx;\n\t                        y = +my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.abs = pathClone(res);\n\t        return res;\n\t    }\n\t    function l2c(x1, y1, x2, y2) {\n\t        return [x1, y1, x2, y2, x2, y2];\n\t    }\n\t    function q2c(x1, y1, ax, ay, x2, y2) {\n\t        var _13 = 1 / 3,\n\t            _23 = 2 / 3;\n\t        return [\n\t                _13 * x1 + _23 * ax,\n\t                _13 * y1 + _23 * ay,\n\t                _13 * x2 + _23 * ax,\n\t                _13 * y2 + _23 * ay,\n\t                x2,\n\t                y2\n\t            ];\n\t    }\n\t    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t        // for more information of where this math came from visit:\n\t        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t        var _120 = PI * 120 / 180,\n\t            rad = PI / 180 * (+angle || 0),\n\t            res = [],\n\t            xy,\n\t            rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return {x: X, y: Y};\n\t            });\n\t        if (!recursive) {\n\t            xy = rotate(x1, y1, -rad);\n\t            x1 = xy.x;\n\t            y1 = xy.y;\n\t            xy = rotate(x2, y2, -rad);\n\t            x2 = xy.x;\n\t            y2 = xy.y;\n\t            var cos = math.cos(PI / 180 * angle),\n\t                sin = math.sin(PI / 180 * angle),\n\t                x = (x1 - x2) / 2,\n\t                y = (y1 - y2) / 2;\n\t            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t            if (h > 1) {\n\t                h = math.sqrt(h);\n\t                rx = h * rx;\n\t                ry = h * ry;\n\t            }\n\t            var rx2 = rx * rx,\n\t                ry2 = ry * ry,\n\t                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t            f1 = x1 < cx ? PI - f1 : f1;\n\t            f2 = x2 < cx ? PI - f2 : f2;\n\t            f1 < 0 && (f1 = PI * 2 + f1);\n\t            f2 < 0 && (f2 = PI * 2 + f2);\n\t            if (sweep_flag && f1 > f2) {\n\t                f1 = f1 - PI * 2;\n\t            }\n\t            if (!sweep_flag && f2 > f1) {\n\t                f2 = f2 - PI * 2;\n\t            }\n\t        } else {\n\t            f1 = recursive[0];\n\t            f2 = recursive[1];\n\t            cx = recursive[2];\n\t            cy = recursive[3];\n\t        }\n\t        var df = f2 - f1;\n\t        if (abs(df) > _120) {\n\t            var f2old = f2,\n\t                x2old = x2,\n\t                y2old = y2;\n\t            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t            x2 = cx + rx * math.cos(f2);\n\t            y2 = cy + ry * math.sin(f2);\n\t            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t        }\n\t        df = f2 - f1;\n\t        var c1 = math.cos(f1),\n\t            s1 = math.sin(f1),\n\t            c2 = math.cos(f2),\n\t            s2 = math.sin(f2),\n\t            t = math.tan(df / 4),\n\t            hx = 4 / 3 * rx * t,\n\t            hy = 4 / 3 * ry * t,\n\t            m1 = [x1, y1],\n\t            m2 = [x1 + hx * s1, y1 - hy * c1],\n\t            m3 = [x2 + hx * s2, y2 - hy * c2],\n\t            m4 = [x2, y2];\n\t        m2[0] = 2 * m1[0] - m2[0];\n\t        m2[1] = 2 * m1[1] - m2[1];\n\t        if (recursive) {\n\t            return [m2, m3, m4].concat(res);\n\t        } else {\n\t            res = [m2, m3, m4].concat(res).join().split(\",\");\n\t            var newres = [];\n\t            for (var i = 0, ii = res.length; i < ii; i++) {\n\t                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t            }\n\t            return newres;\n\t        }\n\t    }\n\t    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t;\n\t        return {\n\t            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t        };\n\t    }\n\t    \n\t    // Returns bounding box of cubic bezier curve.\n\t    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // Original version: NISHIO Hirokazu\n\t    // Modifications: https://github.com/timo22345\n\t    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t        var tvalues = [],\n\t            bounds = [[], []],\n\t            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t        for (var i = 0; i < 2; ++i) {\n\t            if (i == 0) {\n\t                b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                c = 3 * x1 - 3 * x0;\n\t            } else {\n\t                b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                c = 3 * y1 - 3 * y0;\n\t            }\n\t            if (abs(a) < 1e-12) {\n\t                if (abs(b) < 1e-12) {\n\t                    continue;\n\t                }\n\t                t = -c / b;\n\t                if (0 < t && t < 1) {\n\t                    tvalues.push(t);\n\t                }\n\t                continue;\n\t            }\n\t            b2ac = b * b - 4 * c * a;\n\t            sqrtb2ac = math.sqrt(b2ac);\n\t            if (b2ac < 0) {\n\t                continue;\n\t            }\n\t            t1 = (-b + sqrtb2ac) / (2 * a);\n\t            if (0 < t1 && t1 < 1) {\n\t                tvalues.push(t1);\n\t            }\n\t            t2 = (-b - sqrtb2ac) / (2 * a);\n\t            if (0 < t2 && t2 < 1) {\n\t                tvalues.push(t2);\n\t            }\n\t        }\n\t\n\t        var x, y, j = tvalues.length,\n\t            jlen = j,\n\t            mt;\n\t        while (j--) {\n\t            t = tvalues[j];\n\t            mt = 1 - t;\n\t            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t        }\n\t\n\t        bounds[0][jlen] = x0;\n\t        bounds[1][jlen] = y0;\n\t        bounds[0][jlen + 1] = x3;\n\t        bounds[1][jlen + 1] = y3;\n\t        bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t\n\t        return {\n\t          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n\t          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n\t        };\n\t    }\n\t\n\t    function path2curve(path, path2) {\n\t        var pth = !path2 && paths(path);\n\t        if (!path2 && pth.curve) {\n\t            return pathClone(pth.curve);\n\t        }\n\t        var p = pathToAbsolute(path),\n\t            p2 = path2 && pathToAbsolute(path2),\n\t            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            processPath = function (path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                        }\n\t                        else {                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                        }\n\t                        else {                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t            fixArc = function (pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            fixM = function (path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            pcoms1 = [], // path commands of original path p\n\t            pcoms2 = [], // path commands of original path p2\n\t            pfirst = \"\", // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t            p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t            {\n\t                pcoms1[i] = pfirst; // Save current path command\n\t                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t            }\n\t            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t            // which may produce multiple C:s\n\t            // so we have to make sure that C is also C in original path\n\t\n\t            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t            if (p2) { // the same procedures is done to p2\n\t                p2[i] && (pfirst = p2[i][0]);\n\t                if (pfirst != \"C\") {\n\t                    pcoms2[i] = pfirst;\n\t                    i && (pcom = pcoms2[i - 1]);\n\t                }\n\t                p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                    pcoms2[i] = \"C\";\n\t                }\n\t\n\t                fixArc(p2, i);\n\t            }\n\t            fixM(p, p2, attrs, attrs2, i);\n\t            fixM(p2, p, attrs2, attrs, i);\n\t            var seg = p[i],\n\t                seg2 = p2 && p2[i],\n\t                seglen = seg.length,\n\t                seg2len = p2 && seg2.length;\n\t            attrs.x = seg[seglen - 2];\n\t            attrs.y = seg[seglen - 1];\n\t            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t            attrs2.x = p2 && seg2[seg2len - 2];\n\t            attrs2.y = p2 && seg2[seg2len - 1];\n\t        }\n\t        if (!p2) {\n\t            pth.curve = pathClone(p);\n\t        }\n\t        return p2 ? [p, p2] : p;\n\t    }\n\t    function mapPath(path, matrix) {\n\t        if (!matrix) {\n\t            return path;\n\t        }\n\t        var x, y, i, j, ii, jj, pathi;\n\t        path = path2curve(path);\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            pathi = path[i];\n\t            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                x = matrix.x(pathi[j], pathi[j + 1]);\n\t                y = matrix.y(pathi[j], pathi[j + 1]);\n\t                pathi[j] = x;\n\t                pathi[j + 1] = y;\n\t            }\n\t        }\n\t        return path;\n\t    }\n\t\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\t\n\t        return d;\n\t    }\n\t\n\t    // export\n\t    Snap.path = paths;\n\t\n\t    /*\\\n\t     * Snap.path.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the given path in pixels\n\t     **\n\t     - path (string) SVG path string\n\t     **\n\t     = (number) length\n\t    \\*/\n\t    Snap.path.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Snap.path.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns the coordinates of the point located at the given length along the given path\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    Snap.path.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Snap.path.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns the subpath of a given path between given start and end lengths\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    Snap.path.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the path in pixels (only works for `path` elements)\n\t     = (number) length\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\t    };\n\t    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t     **\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        return getPointAtLength(this.attr(\"d\"), length);\n\t    };\n\t    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t     **\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t    };\n\t    Snap._.box = box;\n\t    /*\\\n\t     * Snap.path.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds dot coordinates on the given cubic beziér curve at the given t\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point,\n\t     o     y: (number) y coordinate of the point,\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor,\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     },\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor,\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     },\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve,\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     },\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve,\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     },\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t    /*\\\n\t     * Snap.path.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given cubic beziér curve\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for beziér curve\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.bezierBBox = bezierBBox;\n\t    /*\\\n\t     * Snap.path.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding box\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point is inside\n\t    \\*/\n\t    Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t    Snap.closest = function (x, y, X, Y) {\n\t        var r = 100,\n\t            b = box(x - r / 2, y - r / 2, r, r),\n\t            inside = [],\n\t            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t            found = 0;\n\t        while (r <= 1e6 && !found) {\n\t            for (var i = 0, ii = X.length; i < ii; i++) {\n\t                var xy = getter(i);\n\t                if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                    found++;\n\t                    inside.push(xy);\n\t                    break;\n\t                }\n\t            }\n\t            if (!found) {\n\t                r *= 2;\n\t                b = box(x - r / 2, y - r / 2, r, r)\n\t            }\n\t        }\n\t        if (r == 1e6) {\n\t            return;\n\t        }\n\t        var len = Infinity,\n\t            res;\n\t        for (i = 0, ii = inside.length; i < ii; i++) {\n\t            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t            if (len > l) {\n\t                len = l;\n\t                inside[i].len = l;\n\t                res = inside[i];\n\t            }\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.path.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if bounding boxes intersect\n\t    \\*/\n\t    Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t    /*\\\n\t     * Snap.path.intersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point,\n\t     o         y: (number) y coordinate of the point,\n\t     o         t1: (number) t value for segment of path1,\n\t     o         t2: (number) t value for segment of path2,\n\t     o         segment1: (number) order number for segment of path1,\n\t     o         segment2: (number) order number for segment of path2,\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    Snap.path.intersection = pathIntersection;\n\t    Snap.path.intersectionNumber = pathIntersectionNumber;\n\t    /*\\\n\t     * Snap.path.isPointInside\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     *\n\t     * Note: fill mode doesn’t affect the result of this method.\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) `true` if point is inside the path\n\t    \\*/\n\t    Snap.path.isPointInside = isPointInsidePath;\n\t    /*\\\n\t     * Snap.path.getBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given path\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.getBBox = pathBBox;\n\t    Snap.path.get = getPath;\n\t    /*\\\n\t     * Snap.path.toRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into relative values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toRelative = pathToRelative;\n\t    /*\\\n\t     * Snap.path.toAbsolute\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into absolute values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toAbsolute = pathToAbsolute;\n\t    /*\\\n\t     * Snap.path.toCubic\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic beziér curves\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments\n\t    \\*/\n\t    Snap.path.toCubic = path2curve;\n\t    /*\\\n\t     * Snap.path.map\n\t     [ method ]\n\t     **\n\t     * Transform the path string with the given matrix\n\t     - path (string) path string\n\t     - matrix (object) see @Matrix\n\t     = (string) transformed path string\n\t    \\*/\n\t    Snap.path.map = mapPath;\n\t    Snap.path.toString = toString;\n\t    Snap.path.clone = pathClone;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var mmax = Math.max,\n\t        mmin = Math.min;\n\t\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t\tthis.bindings = {};\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i]) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set\n\t     *\n\t     * If the function returns `false`, the loop stops running.\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.animate\n\t     [ method ]\n\t     **\n\t     * Animates each element in set in sync.\n\t     *\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     * or\n\t     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t     > Usage\n\t     | // animate all elements in set to radius 10\n\t     | set.animate({r: 10}, 500, mina.easein);\n\t     | // or\n\t     | // animate first element to radius 10, but second to radius 20 and in different time\n\t     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t     = (Element) the current element\n\t    \\*/\n\t    setproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Snap._.Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var args = arguments;\n\t        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t            var each = true;\n\t        }\n\t        var begin,\n\t            handler = function () {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t            cb = 0,\n\t            set = this,\n\t            callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t        return this.forEach(function (el, i) {\n\t            eve.once(\"snap.animcreated.\" + el.id, handler);\n\t            if (each) {\n\t                args[i] && el.animate.apply(el, args[i]);\n\t            } else {\n\t                el.animate(attrs, ms, easing, callbacker);\n\t            }\n\t        });\n\t    };\n\t    setproto.remove = function () {\n\t        while (this.length) {\n\t            this.pop().remove();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.bind\n\t     [ method ]\n\t     **\n\t     * Specifies how to handle a specific attribute when applied\n\t     * to a set.\n\t     *\n\t     **\n\t     - attr (string) attribute name\n\t     - callback (function) function to run\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     - eattr (string) attribute on the element to bind the attribute to\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.bind = function (attr, a, b) {\n\t        var data = {};\n\t        if (typeof a == \"function\") {\n\t            this.bindings[attr] = a;\n\t        } else {\n\t            var aname = b || attr;\n\t            this.bindings[attr] = function (v) {\n\t                data[aname] = v;\n\t                a.attr(data);\n\t            };\n\t        }\n\t        return this;\n\t    };\n\t    setproto.attr = function (value) {\n\t        var unbound = {};\n\t        for (var k in value) {\n\t            if (this.bindings[k]) {\n\t                this.bindings[k](value[k]);\n\t            } else {\n\t                unbound[k] = value[k];\n\t            }\n\t        }\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            this.items[i].attr(unbound);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes range of elements from the set\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found and removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin.apply(0, x);\n\t        y = mmin.apply(0, y);\n\t        x2 = mmax.apply(0, x2);\n\t        y2 = mmax.apply(0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y,\n\t            cx: x + (x2 - x) / 2,\n\t            cy: y + (y2 - y) / 2\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = new Set;\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Snap\\u2018s set\";\n\t    };\n\t    setproto.type = \"set\";\n\t    // export\n\t    Snap.Set = Set;\n\t    Snap.set = function () {\n\t        var set = new Set;\n\t        if (arguments.length) {\n\t            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return set;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var names = {},\n\t        reUnit = /[a-z]+$/i,\n\t        Str = String;\n\t    names.stroke = names.fill = \"colour\";\n\t    function getEmpty(item) {\n\t        var l = item[0];\n\t        switch (l.toLowerCase()) {\n\t            case \"t\": return [l, 0, 0];\n\t            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t            case \"r\": if (item.length == 4) {\n\t                return [l, 0, item[2], item[3]];\n\t            } else {\n\t                return [l, 0];\n\t            }\n\t            case \"s\": if (item.length == 5) {\n\t                return [l, 1, 1, item[3], item[4]];\n\t            } else if (item.length == 3) {\n\t                return [l, 1, 1];\n\t            } else {\n\t                return [l, 1];\n\t            }\n\t        }\n\t    }\n\t    function equaliseTransform(t1, t2, getBBox) {\n\t        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t        t1 = Snap.parseTransformString(t1) || [];\n\t        t2 = Snap.parseTransformString(t2) || [];\n\t        var maxlength = Math.max(t1.length, t2.length),\n\t            from = [],\n\t            to = [],\n\t            i = 0, j, jj,\n\t            tt1, tt2;\n\t        for (; i < maxlength; i++) {\n\t            tt1 = t1[i] || getEmpty(t2[i]);\n\t            tt2 = t2[i] || getEmpty(tt1);\n\t            if ((tt1[0] != tt2[0]) ||\n\t                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                ) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t            }\n\t            from[i] = [];\n\t            to[i] = [];\n\t            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                j in tt1 && (from[i][j] = tt1[j]);\n\t                j in tt2 && (to[i][j] = tt2[j]);\n\t            }\n\t        }\n\t        return {\n\t            from: path2array(from),\n\t            to: path2array(to),\n\t            f: getPath(from)\n\t        };\n\t    }\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    function getViewBox(val) {\n\t        return val.join(\" \");\n\t    }\n\t    function getColour(clr) {\n\t        return Snap.rgb(clr[0], clr[1], clr[2]);\n\t    }\n\t    function getPath(path) {\n\t        var k = 0, i, ii, j, jj, out, a, b = [];\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            out = \"[\";\n\t            a = ['\"' + path[i][0] + '\"'];\n\t            for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                a[j] = \"val[\" + (k++) + \"]\";\n\t            }\n\t            out += a + \"]\";\n\t            b[i] = out;\n\t        }\n\t        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t    }\n\t    function path2array(path) {\n\t        var out = [];\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                out.push(path[i][j]);\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    function isNumeric(obj) {\n\t        return isFinite(parseFloat(obj));\n\t    }\n\t    function arrayEqual(arr1, arr2) {\n\t        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t            return false;\n\t        }\n\t        return arr1.toString() == arr2.toString();\n\t    }\n\t    Element.prototype.equal = function (name, b) {\n\t        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t    };\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this;\n\t        if (isNumeric(a) && isNumeric(b)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getNumber\n\t            };\n\t        }\n\t        if (names[name] == \"colour\") {\n\t            A = Snap.color(a);\n\t            B = Snap.color(b);\n\t            return {\n\t                from: [A.r, A.g, A.b, A.opacity],\n\t                to: [B.r, B.g, B.b, B.opacity],\n\t                f: getColour\n\t            };\n\t        }\n\t        if (name == \"viewBox\") {\n\t            A = this.attr(name).vb.split(\" \").map(Number);\n\t            B = b.split(\" \").map(Number);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: getViewBox\n\t            };\n\t        }\n\t        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t            if (b instanceof Snap.Matrix) {\n\t                b = b.toTransformString();\n\t            }\n\t            if (!Snap._.rgTransform.test(b)) {\n\t                b = Snap._.svgTransform2string(b);\n\t            }\n\t            return equaliseTransform(a, b, function () {\n\t                return el.getBBox(1);\n\t            });\n\t        }\n\t        if (name == \"d\" || name == \"path\") {\n\t            A = Snap.path.toCubic(a, b);\n\t            return {\n\t                from: path2array(A[0]),\n\t                to: path2array(A[1]),\n\t                f: getPath(A[0])\n\t            };\n\t        }\n\t        if (name == \"points\") {\n\t            A = Str(a).split(Snap._.separator);\n\t            B = Str(b).split(Snap._.separator);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: function (val) { return val; }\n\t            };\n\t        }\n\t        var aUnit = a.match(reUnit),\n\t            bUnit = Str(b).match(reUnit);\n\t        if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getUnit(aUnit)\n\t            };\n\t        } else {\n\t            return {\n\t                from: this.asPX(name),\n\t                to: this.asPX(name, b),\n\t                f: getNumber\n\t            };\n\t        }\n\t    });\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t    has = \"hasOwnProperty\",\n\t    supportsTouch = \"createTouch\" in glob.doc,\n\t    events = [\n\t        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n\t        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n\t        \"touchcancel\"\n\t    ],\n\t    touchMap = {\n\t        mousedown: \"touchstart\",\n\t        mousemove: \"touchmove\",\n\t        mouseup: \"touchend\"\n\t    },\n\t    getScroll = function (xy, el) {\n\t        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t    },\n\t    preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    addEvent = function (obj, type, fn, element) {\n\t        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t            f = function (e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t        if (type !== realName) {\n\t            obj.addEventListener(type, f, false);\n\t        }\n\t\n\t        obj.addEventListener(realName, f, false);\n\t\n\t        return function () {\n\t            if (type !== realName) {\n\t                obj.removeEventListener(type, f, false);\n\t            }\n\t\n\t            obj.removeEventListener(realName, f, false);\n\t            return true;\n\t        };\n\t    },\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = getScroll(\"y\"),\n\t            scrollX = getScroll(\"x\"),\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch) {\n\t                var i = e.touches && e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            // glob.win.opera && parent.removeChild(node);\n\t            // node.style.display = \"none\";\n\t            // o = dragi.el.paper.getElementByPoint(x, y);\n\t            // node.style.display = display;\n\t            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t            eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t        }\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds a click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes a click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds a double click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes a double click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds a mousedown event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes a mousedown event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds a mousemove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes a mousemove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds a mouseout event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes a mouseout event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds a mouseover event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes a mouseover event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds a mouseup event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes a mouseup event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds a touchstart event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes a touchstart event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds a touchmove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes a touchmove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds a touchend event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes a touchend event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds a touchcancel event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes a touchcancel event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (Snap.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({\n\t                        name: eventName,\n\t                        f: fn,\n\t                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                    });\n\t                } else {\n\t                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n\t                        try {\n\t                            this.events[i].f.call(this);\n\t                        } catch (e) {}\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            Snap[\"un\" + eventName] =\n\t            elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--) if (events[l].name == eventName &&\n\t                               (events[l].f == fn || !fn)) {\n\t                    events[l].unbind();\n\t                    events.splice(l, 1);\n\t                    !events.length && delete this.events;\n\t                    return this;\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds hover event handlers to the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes hover event handlers from the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for an element's drag gesture\n\t     **\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n\t     * `drag.over.<id>` fires as well.\n\t     *\n\t     * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler are called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        var el = this;\n\t        if (!arguments.length) {\n\t            var origTransform;\n\t            return el.drag(function (dx, dy) {\n\t                this.attr({\n\t                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                });\n\t            }, function () {\n\t                origTransform = this.transform().local;\n\t            });\n\t        }\n\t        function start(e, x, y) {\n\t            (e.originalEvent || e).preventDefault();\n\t            el._drag.x = x;\n\t            el._drag.y = y;\n\t            el._drag.id = e.identifier;\n\t            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t        }\n\t        function init(e, x, y) {\n\t            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t        }\n\t        eve.on(\"snap.draginit.\" + el.id, start);\n\t        el._drag = {};\n\t        draggable.push({el: el, start: start, init: init});\n\t        el.mousedown(init);\n\t        return el;\n\t    };\n\t    /*\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    // elproto.onDragOver = function (f) {\n\t    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t    // };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from the given element\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].init);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"snap.drag.*.\" + this.id);\n\t            eve.unbind(\"snap.draginit.\" + this.id);\n\t        }\n\t        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        pproto = Paper.prototype,\n\t        rgurl = /^\\s*url\\((.+)\\)/,\n\t        Str = String,\n\t        $ = Snap._.$;\n\t    Snap.filter = {};\n\t    /*\\\n\t     * Paper.filter\n\t     [ method ]\n\t     **\n\t     * Creates a `<filter>` element\n\t     **\n\t     - filstr (string) SVG fragment of filter provided as a string\n\t     = (object) @Element\n\t     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t     > Usage\n\t     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    pproto.filter = function (filstr) {\n\t        var paper = this;\n\t        if (paper.type != \"svg\") {\n\t            paper = paper.paper;\n\t        }\n\t        var f = Snap.parse(Str(filstr)),\n\t            id = Snap._.id(),\n\t            width = paper.node.offsetWidth,\n\t            height = paper.node.offsetHeight,\n\t            filter = $(\"filter\");\n\t        $(filter, {\n\t            id: id,\n\t            filterUnits: \"userSpaceOnUse\"\n\t        });\n\t        filter.appendChild(f.node);\n\t        paper.defs.appendChild(filter);\n\t        return new Element(filter);\n\t    };\n\t    \n\t    eve.on(\"snap.util.getattr.filter\", function () {\n\t        eve.stop();\n\t        var p = $(this.node, \"filter\");\n\t        if (p) {\n\t            var match = Str(p).match(rgurl);\n\t            return match && Snap.select(match[1]);\n\t        }\n\t    });\n\t    eve.on(\"snap.util.attr.filter\", function (value) {\n\t        if (value instanceof Element && value.type == \"filter\") {\n\t            eve.stop();\n\t            var id = value.node.id;\n\t            if (!id) {\n\t                $(value.node, {id: value.id});\n\t                id = value.id;\n\t            }\n\t            $(this.node, {\n\t                filter: Snap.url(id)\n\t            });\n\t        }\n\t        if (!value || value == \"none\") {\n\t            eve.stop();\n\t            this.node.removeAttribute(\"filter\");\n\t        }\n\t    });\n\t    /*\\\n\t     * Snap.filter.blur\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the blur filter\n\t     **\n\t     - x (number) amount of horizontal blur, in pixels\n\t     - y (number) #optional amount of vertical blur, in pixels\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.blur = function (x, y) {\n\t        if (x == null) {\n\t            x = 2;\n\t        }\n\t        var def = y == null ? x : [x, y];\n\t        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t            def: def\n\t        });\n\t    };\n\t    Snap.filter.blur.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.shadow\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the shadow filter\n\t     **\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - blur (number) #optional amount of blur\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * which makes blur default to `4`. Or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t        if (typeof blur == \"string\") {\n\t            color = blur;\n\t            opacity = color;\n\t            blur = 4;\n\t        }\n\t        if (typeof color != \"string\") {\n\t            opacity = color;\n\t            color = \"#000\";\n\t        }\n\t        color = color || \"#000\";\n\t        if (blur == null) {\n\t            blur = 4;\n\t        }\n\t        if (opacity == null) {\n\t            opacity = 1;\n\t        }\n\t        if (dx == null) {\n\t            dx = 0;\n\t            dy = 2;\n\t        }\n\t        if (dy == null) {\n\t            dy = dx;\n\t        }\n\t        color = Snap.color(color);\n\t        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t            color: color,\n\t            dx: dx,\n\t            dy: dy,\n\t            blur: blur,\n\t            opacity: opacity\n\t        });\n\t    };\n\t    Snap.filter.shadow.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.grayscale\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the grayscale filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.grayscale = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.2126 + 0.7874 * (1 - amount),\n\t            b: 0.7152 - 0.7152 * (1 - amount),\n\t            c: 0.0722 - 0.0722 * (1 - amount),\n\t            d: 0.2126 - 0.2126 * (1 - amount),\n\t            e: 0.7152 + 0.2848 * (1 - amount),\n\t            f: 0.0722 - 0.0722 * (1 - amount),\n\t            g: 0.2126 - 0.2126 * (1 - amount),\n\t            h: 0.0722 + 0.9278 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.grayscale.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.sepia\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the sepia filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.sepia = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.393 + 0.607 * (1 - amount),\n\t            b: 0.769 - 0.769 * (1 - amount),\n\t            c: 0.189 - 0.189 * (1 - amount),\n\t            d: 0.349 - 0.349 * (1 - amount),\n\t            e: 0.686 + 0.314 * (1 - amount),\n\t            f: 0.168 - 0.168 * (1 - amount),\n\t            g: 0.272 - 0.272 * (1 - amount),\n\t            h: 0.534 - 0.534 * (1 - amount),\n\t            i: 0.131 + 0.869 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.sepia.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.saturate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the saturate filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.saturate = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t            amount: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.saturate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.hueRotate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the hue-rotate filter\n\t     **\n\t     - angle (number) angle of rotation\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.hueRotate = function (angle) {\n\t        angle = angle || 0;\n\t        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t            angle: angle\n\t        });\n\t    };\n\t    Snap.filter.hueRotate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.invert\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the invert filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.invert = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.invert.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.brightness\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the brightness filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.brightness = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t            amount: amount\n\t        });\n\t    };\n\t    Snap.filter.brightness.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.contrast\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the contrast filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.contrast = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: .5 - amount / 2\n\t        });\n\t    };\n\t    Snap.filter.contrast.toString = function () {\n\t        return this();\n\t    };\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var box = Snap._.box,\n\t        is = Snap.is,\n\t        firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t        toString = function () {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t    /*\\\n\t     * Element.getAlign\n\t     [ method ]\n\t     **\n\t     * Returns shift needed to align the element relatively to given element.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t     > Usage\n\t     | el.transform(el.getAlign(el2, \"top\"));\n\t     * or\n\t     | var dy = el.getAlign(el2, \"top\").dy;\n\t    \\*/\n\t    Element.prototype.getAlign = function (el, way) {\n\t        if (way == null && is(el, \"string\")) {\n\t            way = el;\n\t            el = null;\n\t        }\n\t        el = el || this.paper;\n\t        var bx = el.getBBox ? el.getBBox() : box(el),\n\t            bb = this.getBBox(),\n\t            out = {};\n\t        way = way && way.match(firstLetter);\n\t        way = way ? way[1].toLowerCase() : \"c\";\n\t        switch (way) {\n\t            case \"t\":\n\t                out.dx = 0;\n\t                out.dy = bx.y - bb.y;\n\t            break;\n\t            case \"b\":\n\t                out.dx = 0;\n\t                out.dy = bx.y2 - bb.y2;\n\t            break;\n\t            case \"m\":\n\t                out.dx = 0;\n\t                out.dy = bx.cy - bb.cy;\n\t            break;\n\t            case \"l\":\n\t                out.dx = bx.x - bb.x;\n\t                out.dy = 0;\n\t            break;\n\t            case \"r\":\n\t                out.dx = bx.x2 - bb.x2;\n\t                out.dy = 0;\n\t            break;\n\t            default:\n\t                out.dx = bx.cx - bb.cx;\n\t                out.dy = 0;\n\t            break;\n\t        }\n\t        out.toString = toString;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.align\n\t     [ method ]\n\t     **\n\t     * Aligns the element relatively to given one via transformation.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object) this element\n\t     > Usage\n\t     | el.align(el2, \"top\");\n\t     * or\n\t     | el.align(\"middle\");\n\t    \\*/\n\t    Element.prototype.align = function (el, way) {\n\t        return this.transform(\"...\" + this.getAlign(el, way));\n\t    };\n\t});\n\t\n\treturn Snap;\n\t}));\n\t}.call(window));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** chordViewer.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c0688cad550561256cb1\n **/","// const test = \"this is a test\";\n// console.log(test);\n\n// /**\n//  * This defines our instrument, a\n//  * ukulele. An instrument is defined\n//  * by its number of strings and its\n//  * notes.\n//  */\n// const ukulele = {\n//   strings: ['G', 'C', 'E', 'A'],\n//   notes: [{\n//     names: ['G'],\n//     string: 1,\n//     fret: 0\n//   }, {\n//     names: ['G#', 'Ab'],\n//     string: 1,\n//     fret: 1\n//   }, {\n//     names: ['A'],\n//     string: 1,\n//     fret: 2\n//   }, {\n//     names: ['A#', 'Bb'],\n//     string: 1,\n//     fret: 3\n//   }, {\n//     names: ['B'],\n//     string: 1,\n//     fret: 4\n//   }, {\n//     names: ['C'],\n//     string: 1,\n//     fret: 5\n//   }, {\n//     names: ['C#', 'Db'],\n//     string: 1,\n//     fret: 6\n//   }, {\n//     names: ['D'],\n//     string: 1,\n//     fret: 7\n//   }, {\n//     names: ['D#', 'Eb'],\n//     string: 1,\n//     fret: 8\n//   }, {\n//     names: ['E'],\n//     string: 1,\n//     fret: 9\n//   }, {\n//     names: ['F'],\n//     string: 1,\n//     fret: 10\n//   }, {\n//     names: ['F#', 'Gb'],\n//     string: 1,\n//     fret: 11\n//   }, {\n//     names: ['G'],\n//     string: 1,\n//     fret: 12\n//   }, {\n//     names: ['C'],\n//     string: 2,\n//     fret: 0\n//   }, {\n//     names: ['C#', 'Db'],\n//     string: 2,\n//     fret: 1\n//   }, {\n//     names: ['D'],\n//     string: 2,\n//     fret: 2\n//   }, {\n//     names: ['D#', 'Eb'],\n//     string: 2,\n//     fret: 3\n//   }, {\n//     names: ['E'],\n//     string: 2,\n//     fret: 4\n//   }, {\n//     names: ['F'],\n//     string: 2,\n//     fret: 5\n//   }, {\n//     names: ['F#', 'Gb'],\n//     string: 2,\n//     fret: 6\n//   }, {\n//     names: ['G'],\n//     string: 2,\n//     fret: 7\n//   }, {\n//     names: ['G#', 'Ab'],\n//     string: 2,\n//     fret: 8\n//   }, {\n//     names: ['A'],\n//     string: 2,\n//     fret: 9\n//   }, {\n//     names: ['A#', 'Bb'],\n//     string: 2,\n//     fret: 10\n//   }, {\n//     names: ['B'],\n//     string: 2,\n//     fret: 11\n//   }, {\n//     names: ['C'],\n//     string: 2,\n//     fret: 12\n//   }, {\n//     names: ['E'],\n//     string: 3,\n//     fret: 0\n//   }, {\n//     names: ['F'],\n//     string: 3,\n//     fret: 1\n//   }, {\n//     names: ['F#', 'Gb'],\n//     string: 3,\n//     fret: 2\n//   }, {\n//     names: ['G'],\n//     string: 3,\n//     fret: 3\n//   }, {\n//     names: ['G#', 'Ab'],\n//     string: 3,\n//     fret: 4\n//   }, {\n//     names: ['A'],\n//     string: 3,\n//     fret: 5\n//   }, {\n//     names: ['A#', 'Bb'],\n//     string: 3,\n//     fret: 6\n//   }, {\n//     names: ['B'],\n//     string: 3,\n//     fret: 7\n//   }, {\n//     names: ['C'],\n//     string: 3,\n//     fret: 8\n//   }, {\n//     names: ['C#', 'Db'],\n//     string: 3,\n//     fret: 9\n//   }, {\n//     names: ['D'],\n//     string: 3,\n//     fret: 10\n//   }, {\n//     names: ['D#', 'Eb'],\n//     string: 3,\n//     fret: 11\n//   }, {\n//     names: ['E'],\n//     string: 3,\n//     fret: 12\n//   }, {\n//     names: ['A'],\n//     string: 4,\n//     fret: 0\n//   }, {\n//     names: ['A#', 'Bb'],\n//     string: 4,\n//     fret: 1\n//   }, {\n//     names: ['B'],\n//     string: 4,\n//     fret: 2\n//   }, {\n//     names: ['C'],\n//     string: 4,\n//     fret: 3\n//   }, {\n//     names: ['C#', 'Db'],\n//     string: 4,\n//     fret: 4\n//   }, {\n//     names: ['D'],\n//     string: 4,\n//     fret: 5\n//   }, {\n//     names: ['D#', 'Eb'],\n//     string: 4,\n//     fret: 6\n//   }, {\n//     names: ['E'],\n//     string: 4,\n//     fret: 7\n//   }, {\n//     names: ['F'],\n//     string: 4,\n//     fret: 8\n//   }, {\n//     names: ['F#', 'Gb'],\n//     string: 4,\n//     fret: 9\n//   }, {\n//     names: ['G'],\n//     string: 4,\n//     fret: 10\n//   }, {\n//     names: ['G#', 'Ab'],\n//     string: 4,\n//     fret: 11\n//   }, {\n//     names: ['A'],\n//     string: 4,\n//     fret: 12\n//   }, ],\n// };\n\n// /**\n//  * This defines a C chord\n//  */\n// const CChord = {\n//   name: 'C',\n//   notes: [{\n//     names: ['C'],\n//     string: 4,\n//     fret: 3\n//   }, {\n//     names: ['G'],\n//     string: 1,\n//     fret: 0\n//   }, {\n//     names: ['C'],\n//     string: 2,\n//     fret: 0\n//   }, {\n//     names: ['E'],\n//     string: 3,\n//     fret: 0\n//   }]\n// };\n\n// /**\n//  * Defines a D Chord\n//  */\n// const DChord = {\n//   name: 'D',\n//   notes: [{\n//     names: ['A'],\n//     string: 4,\n//     fret: 0\n//   }, {\n//     names: ['A'],\n//     string: 1,\n//     fret: 2\n//   }, {\n//     names: ['D'],\n//     string: 2,\n//     fret: 2\n//   }, {\n//     names: ['F#', 'Eb'],\n//     string: 3,\n//     fret: 2\n//   }]\n// };\n\n\n\n// let r = new Renderer();\n// r.render('.uke-chord');\n\nimport { render } from './renderer';\nwindow.render = render;\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","const Snap = require('snapsvg');\n\n/**\n * These refer to the default settings\n * of the viewer. The User can \n * overwrite them in the render \n * method\n */\nconst defaults = {\n    width: 500,\n    height: 500,\n    strings: ['G', 'C', 'E', 'A'],\n    strokeWidth: 5,\n    strokeStyle: '#000',\n    fretEnumeration: 4,\n    fontFamily: 'Gill Sans',\n    fontSize: '36px'\n};\n\n\n/**\n * This function draws the fret number(s) on the board\n */\nconst drawFretNum = function(elem, s) {\n    for(let i = 0; i < s.numStrings + 1; i++) {\n        const fretNum = i + s.offset;\n        if (fretNum % s.fretEnumeration === 0) {\n            const fretHeight = s.spacing * s.numStrings;\n            const fret = elem.text(s.spacing * i + s.spacing / 2, fretHeight + s.spacing / 1.25, fretNum);\n            fret.attr({\n                'font-family': 'Gill Sans',\n                'font-size': '36px'\n            });\n        }\n    }\n};\n\n\n/**\n * This function draws a note on the given instrument\n */\nconst drawNote = function(elem, note, instrument, s) {\n    const noteX = (note.fret - s.offset) * s.spacing + (s.spacing / 2) + (s.strokeWidth / 2);\n    const noteY = note.string * s.spacing;\n    const circ = elem.circle(noteX, noteY, s.spacing / 4);\n    if (note.fret === 0) {\n        circ.attr({\n            fill: 'none'\n        });\n    } else {\n        circ.attr({\n            fill: s.strokeStyle\n        });\n    }\n};\n\n\n/**\n * This function draws a chord on the given instrument\n */\nconst drawChord = function(elem, chord, instrument, s) {\n    for (let i = 0; i < chord.notes.length; i++) {\n        drawNote(elem, chord.notes[i], instrument, s);\n    }\n};\n\n\n/**\n * This function draws the board according to \n * the provided settings\n */\nconst drawBoard = function(elem, instrument, s) {\n    // draw the strings\n    for (let i = 0; i < s.numStrings; i++) {\n        const stringHeight = s.start + (i * s.spacing);\n        const note = elem.text(s.spacing / 2, stringHeight + 12, instrument.strings[i]);\n        note.attr({\n            'font-family': 'Gill Sans',\n            'font-size': '36px'\n        });\n        const string = elem.rect(s.spacing, stringHeight, s.width, s.strokeWidth);\n        string.attr({\n            fill: s.strokeStyle,\n        });\n    }\n    // draw the frets\n    for (let i = 0; i < s.numStrings + 2; i++) {\n        const fretOffset = s.spacing + i * s.spacing;\n        const fretHeightStart = s.spacing * 1;\n        const fretHeightEnd = s.spacing * (s.numStrings - 1);\n        const fret = elem.rect(fretOffset, fretHeightStart, s.strokeWidth, fretHeightEnd);\n        fret.attr({\n            fill: s.strokeStyle,\n        });\n    }\n    drawFretNum(elem, s);\n};\n\n\n/**\n * Use the instrument, chord, and other settings to\n * create the settings for the object\n */\nconst initialize = function(instrument, chord, s) {\n    let initial = {};\n    let settings = s || {};\n\n    initial.fretEnumeration = settings.fretEnumeration ? settings.fretEnumeration : defaults.fretEnumeration; \n    initial.numStrings = instrument.strings.length || defaults.numStrings;\n    initial.height = settings.height ? settings.height - (settings.height / 6) : defaults.height - (defaults.height / 6);\n    initial.width = settings.width ? settings.width - (settings.width / 6) : defaults.width - (defaults.width / 6);\n    initial.strokeWidth = settings.strokeWidth ? settings.strokeWidth : defaults.strokeWidth;\n    initial.strokeStyle = settings.strokeStyle ? settings.strokeStyle : defaults.strokeStyle;\n    initial.spacing = (initial.height - initial.strokeWidth) / (initial.numStrings + 1);\n    initial.start = initial.spacing;\n\n    let furthestChord = 0;\n    for (let i = 0; i < chord.notes.length; i++) {\n        if (chord.notes[i].fret > furthestChord) {\n            furthestChord = chord.notes[i].fret;\n        } \n    }\n    let numFrets = initial.numStrings + 1;\n    initial.offset = furthestChord - numFrets;\n    if (initial.offset < 0) {\n        initial.offset = 0;\n    }\n\n    return initial;\n};\n  \n  \n/**\n * Given an SVG element, an instrument, and a chord,\n * this function renders a chord on it. The user can also\n * optionally define some settings that alter the appearance\n */\nconst render = function (elem, instrument, chord, settings) {\n    const initialSettings = initialize(instrument, chord, settings);\n    let svg = Snap(elem);\n    drawBoard(svg, instrument, initialSettings);\n    drawChord(svg, chord, instrument, initialSettings);\n};\n\n\nexport { render };\n\n\n// /**\n//  * This is our Renderer. The Renderer \n//  * takes in a \n//  */\n// const Renderer = function() {\n\n//   /**\n//    * Given a DOM element, render the \n//    * chord into that element\n//    */\n//   const render = function() {\n//     let $elem = $(this);\n//     let $svg = $('<svg width=\"500\" height=\"500\"></svg>');\n//     const svg = Snap($svg.get(0));\n//     $elem.append($svg);\n//     const chord = $elem.data('chord');\n\n//     const settings = initialize(ukulele, DChord, { \n//       fretEnumeration: 2 \n//     });\n\n//     drawBoard(svg, ukulele, settings)\n//     // drawNote(svg, 'C', ukulele, settings);\n//     drawChord(svg, DChord, ukulele, settings);\n//   }\n\n//   return {\n//     render: render\n//   };\n// };\n\n\n/** WEBPACK FOOTER **\n ** ./src/renderer.js\n **/","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.4.0\n// \n// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// \n// build: 2015-04-07\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.4.2\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            name = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        name = String(name);\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = name.split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = name.split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = name.split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = name.split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != 'undefined') {\n        // Next for Node.js or CommonJS\n        var eve = require('eve');\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16);\n                       },\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function () {\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        len && requestAnimFrame(frame);\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in gereal case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && requestAnimFrame(frame);\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < (1 / p)) {\n            l = s * n * n;\n        } else {\n            if (n < (2 / p)) {\n                n -= (1.5 / p);\n                l = s * n * n + .75;\n            } else {\n                if (n < (2.5 / p)) {\n                    n -= (2.25 / p);\n                    l = s * n * n + .9375;\n                } else {\n                    n -= (2.625 / p);\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.4.0\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            w = glob.doc.querySelector(String(w));\n            return wrap(w);\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    reURLValue = /^url\\(#?([^)]+)\\)$/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  (type == \"null\" && o === null) ||\n            (type == typeof o && o !== null) ||\n            (type == \"object\" && o === Object(o)) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n > Parameters\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    \n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = (C == 0 ? null :\n         V == r ? (g - b) / C :\n         V == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4\n        );\n    H = ((H + 360) % 6) * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = (C == 0 ? null :\n         M == r ? (g - b) / C :\n         M == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4);\n    H = ((H + 360) % 6) * 60 / 360;\n    L = (M + m) / 2;\n    S = (C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L));\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n    \n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n            (el.node.parentNode && wrap(el.node.parentNode)) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open((postData ? \"POST\" : \"GET\"), url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = URL(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    // animation\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            return this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\(#?([^)]+)\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value.type == \"clipPath\") {\n                var clip = value;\n            } else {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while ((clazz = classes[j++])) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            this.node.appendChild(stop);\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length,\n                start = 0,\n                j = 0;\n            function seed(i, end) {\n                var step = (end - start) / (i - j);\n                for (var k = j; k < i; k++) {\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n                }\n                j = i;\n                start = end;\n            }\n            len--;\n            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n                seed(i, stops[i].offset);\n            }\n            stops[len].offset = stops[len].offset || 100;\n            seed(len, stops[len].offset);\n            for (i = 0; i <= len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0, \n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + (+r), y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + ((j % 2) ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n    \n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    Snap.Set = Set;\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n        t1 = Snap.parseTransformString(t1) || [];\n        t2 = Snap.parseTransformString(t2) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if ((tt1[0] != tt2[0]) ||\n                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + (k++) + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(parseFloat(obj));\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (b instanceof Snap.Matrix) {\n                b = b.toTransformString();\n            }\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.svgTransform2string(b);\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n    \n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (typeof blur == \"string\") {\n            color = blur;\n            opacity = color;\n            blur = 4;\n        }\n        if (typeof color != \"string\") {\n            opacity = color;\n            color = \"#000\";\n        }\n        color = color || \"#000\";\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/snapsvg/dist/snap.svg.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}